{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/mac/Documents/workstation/2025/lemu-project/developer/src/app/api/apiData.ts"],"sourcesContent":["export interface Endpoint {\n  id: string;\n  name: string;\n  description: string;\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE';\n  url: string;\n  headers?: Record<string, string>;\n  requestBody?: Record<string, unknown>;\n  parameters?: Record<string, {\n    type: string;\n    description: string;\n    required: boolean;\n  }>;\n  responses: {\n    [statusCode: string]: {\n      description: string;\n      example: Record<string, unknown>;\n    };\n  };\n  sampleCode?: {\n    curl?: string;\n    javascript?: string;\n    python?: string;\n    ruby?: string;\n    go?: string;\n    java?: string;\n    csharp?: string;\n    php?: string;\n    nodejs?: string;\n    kotlin?: string;\n    swift?: string;\n    rust?: string;\n    dart?: string;\n    elixir?: string;\n    powershell?: string;\n    bash?: string;\n    perl?: string;\n    r?: string;\n    scala?: string;\n    haskell?: string;\n    clojure?: string;\n    typescript?: string;\n    groovy?: string;\n    lua?: string;\n  };\n}\n\nexport interface ApiCategory {\n  id: string;\n  name: string;\n  description: string;\n  endpoints: Endpoint[];\n}\n\nexport const API_DATA: ApiCategory[] = [\n  {\n    id: 'banks',\n    name: 'Banks',\n    description: 'Endpoints for managing bank operations',\n    endpoints: [\n      {\n        id: 'get-banks',\n        name: 'Get Bank List',\n        description: 'Retrieve a list of supported banks',\n        method: 'GET',\n        url: '/api/v1/banks',\n        responses: {\n          '200': {\n            description: 'List of banks retrieved successfully',\n            example: {\n              status: 'success',\n              data: {\n                banks: [\n                  {\n                    id: 'bank_123',\n                    name: 'First Bank',\n                    code: '011',\n                    country: 'NG',\n                    currency: 'NGN'\n                  },\n                  {\n                    id: 'bank_456',\n                    name: 'Access Bank',\n                    code: '044',\n                    country: 'NG',\n                    currency: 'NGN'\n                  }\n                ]\n              }\n            }\n          },\n          '401': {\n            description: 'Unauthorized. Authentication failed',\n            example: {\n              status: 'error',\n              message: 'Authentication failed. Invalid API key'\n            }\n          }\n        },\n        sampleCode: {\n          curl: \"curl -X GET \\\\\\n  https://api.lemu.co/api/v1/banks \\\\\\n  -H 'Authorization: Bearer YOUR_API_KEY'\",\n          javascript: \"fetch('https://api.lemu.co/api/v1/banks', {\\n  method: 'GET',\\n  headers: {\\n    'Authorization': 'Bearer YOUR_API_KEY'\\n  }\\n})\\n.then(response => response.json())\\n.then(data => console.log(data))\\n.catch(error => console.error('Error:', error));\",\n          python: \"import requests\\n\\nheaders = {\\n    'Authorization': 'Bearer YOUR_API_KEY'\\n}\\n\\nresponse = requests.get('https://api.lemu.co/api/v1/banks', headers=headers)\\n\\nprint(response.json())\",\n          ruby: \"require 'net/http'\\nrequire 'uri'\\nrequire 'json'\\n\\nuri = URI.parse('https://api.lemu.co/api/v1/banks')\\nrequest = Net::HTTP::Get.new(uri)\\nrequest['Authorization'] = 'Bearer YOUR_API_KEY'\\n\\nresponse = Net::HTTP.start(uri.hostname, uri.port, use_ssl: uri.scheme == 'https') do |http|\\n  http.request(request)\\nend\\n\\nputs JSON.parse(response.body)\",\n          php: \"<?php\\n$curl = curl_init();\\n\\ncurl_setopt_array($curl, [\\n  CURLOPT_URL => \\\"https://api.lemu.co/api/v1/banks\\\",\\n  CURLOPT_RETURNTRANSFER => true,\\n  CURLOPT_HTTPHEADER => [\\n    \\\"Authorization: Bearer YOUR_API_KEY\\\"\\n  ],\\n]);\\n\\n$response = curl_exec($curl);\\ncurl_close($curl);\\n\\necho $response;\\n?>\",\n          go: \"package main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\t\\\"io/ioutil\\\"\\n\\t\\\"net/http\\\"\\n)\\n\\nfunc main() {\\n\\tclient := &http.Client{}\\n\\treq, _ := http.NewRequest(\\\"GET\\\", \\\"https://api.lemu.co/api/v1/banks\\\", nil)\\n\\treq.Header.Add(\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\")\\n\\n\\tresp, err := client.Do(req)\\n\\tif err != nil {\\n\\t\\tfmt.Println(\\\"Error:\\\", err)\\n\\t\\treturn\\n\\t}\\n\\tdefer resp.Body.Close()\\n\\n\\tbody, _ := ioutil.ReadAll(resp.Body)\\n\\tfmt.Println(string(body))\\n}\",\n          java: \"import java.net.HttpURLConnection;\\nimport java.net.URL;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class GetBanks {\\n    public static void main(String[] args) {\\n        try {\\n            URL url = new URL(\\\"https://api.lemu.co/api/v1/banks\\\");\\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\\n            conn.setRequestMethod(\\\"GET\\\");\\n            conn.setRequestProperty(\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\");\\n\\n            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\\n            String inputLine;\\n            StringBuffer response = new StringBuffer();\\n            while ((inputLine = in.readLine()) != null) {\\n                response.append(inputLine);\\n            }\\n            in.close();\\n\\n            System.out.println(response.toString());\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}\",\n          csharp: \"using System;\\nusing System.Net.Http;\\nusing System.Threading.Tasks;\\n\\nnamespace LemuApiExample\\n{\\n    class Program\\n    {\\n        static async Task Main(string[] args)\\n        {\\n            using (HttpClient client = new HttpClient())\\n            {\\n                client.DefaultRequestHeaders.Add(\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\");\\n                \\n                HttpResponseMessage response = await client.GetAsync(\\\"https://api.lemu.co/api/v1/banks\\\");\\n                string responseBody = await response.Content.ReadAsStringAsync();\\n                \\n                Console.WriteLine(responseBody);\\n            }\\n        }\\n    }\\n}\",\n          nodejs: \"const axios = require('axios');\\n\\nasync function getBanks() {\\n  try {\\n    const response = await axios({\\n      method: 'get',\\n      url: 'https://api.lemu.co/api/v1/banks',\\n      headers: {\\n        'Authorization': 'Bearer YOUR_API_KEY'\\n      }\\n    });\\n    \\n    return response.data;\\n  } catch (error) {\\n    console.error('Error:', error.response?.data || error.message);\\n  }\\n}\",\n          kotlin: \"import java.net.HttpURLConnection\\nimport java.net.URL\\nimport java.io.BufferedReader\\nimport java.io.InputStreamReader\\n\\nfun main() {\\n    val url = URL(\\\"https://api.lemu.co/api/v1/banks\\\")\\n    val connection = url.openConnection() as HttpURLConnection\\n    connection.requestMethod = \\\"GET\\\"\\n    connection.setRequestProperty(\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\")\\n\\n    val responseCode = connection.responseCode\\n    if (responseCode == HttpURLConnection.HTTP_OK) {\\n        val response = BufferedReader(InputStreamReader(connection.inputStream)).use { it.readText() }\\n        println(response)\\n    } else {\\n        println(\\\"Error: $responseCode\\\")\\n    }\\n}\",\n          swift: \"import Foundation\\n\\nlet url = URL(string: \\\"https://api.lemu.co/api/v1/banks\\\")!\\nvar request = URLRequest(url: url)\\nrequest.httpMethod = \\\"GET\\\"\\nrequest.addValue(\\\"Bearer YOUR_API_KEY\\\", forHTTPHeaderField: \\\"Authorization\\\")\\n\\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in\\n    guard let data = data, error == nil else {\\n        print(\\\"Error: \\\\(error?.localizedDescription ?? \\\"Unknown error\\\")\\\")\\n        return\\n    }\\n    \\n    if let responseString = String(data: data, encoding: .utf8) {\\n        print(responseString)\\n    }\\n}\\n\\ntask.resume()\",\n          rust: \"use reqwest::header::{HeaderMap, HeaderValue, AUTHORIZATION};\\n\\n#[tokio::main]\\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\\n    let mut headers = HeaderMap::new();\\n    headers.insert(AUTHORIZATION, HeaderValue::from_static(\\\"Bearer YOUR_API_KEY\\\"));\\n\\n    let client = reqwest::Client::new();\\n    let res = client.get(\\\"https://api.lemu.co/api/v1/banks\\\")\\n        .headers(headers)\\n        .send()\\n        .await?\\n        .text()\\n        .await?;\\n\\n    println!(\\\"{}\\\", res);\\n    Ok(())\\n}\",\n          typescript: \"import axios from 'axios';\\n\\nasync function getBanks(): Promise<any> {\\n  try {\\n    const response = await axios({\\n      method: 'get',\\n      url: 'https://api.lemu.co/api/v1/banks',\\n      headers: {\\n        'Authorization': 'Bearer YOUR_API_KEY'\\n      }\\n    });\\n    \\n    return response.data;\\n  } catch (error) {\\n    console.error('Error:', error);\\n    throw error;\\n  }\\n}\",\n          bash: \"#!/bin/bash\\n\\ncurl -X GET \\\\\\n  https://api.lemu.co/api/v1/banks \\\\\\n  -H 'Authorization: Bearer YOUR_API_KEY'\",\n          powershell: \"$headers = @{\\n    \\\"Authorization\\\" = \\\"Bearer YOUR_API_KEY\\\"\\n}\\n\\n$response = Invoke-RestMethod -Uri \\\"https://api.lemu.co/api/v1/banks\\\" -Method GET -Headers $headers\\n$response | ConvertTo-Json\",\n          dart: \"import 'package:http/http.dart' as http;\\nimport 'dart:convert';\\n\\nFuture<void> getBanks() async {\\n  final url = Uri.parse('https://api.lemu.co/api/v1/banks');\\n  final response = await http.get(\\n    url,\\n    headers: {\\n      'Authorization': 'Bearer YOUR_API_KEY',\\n    },\\n  );\\n\\n  if (response.statusCode == 200) {\\n    final data = jsonDecode(response.body);\\n    print(data);\\n  } else {\\n    print('Error: ${response.statusCode}');\\n  }\\n}\",\n          elixir: \"defmodule BankClient do\\n  def get_banks do\\n    url = \\\"https://api.lemu.co/api/v1/banks\\\"\\n    headers = [\\n      {\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\"}\\n    ]\\n    \\n    case HTTPoison.get(url, headers) do\\n      {:ok, %HTTPoison.Response{status_code: 200, body: body}} ->\\n        Jason.decode!(body)\\n      {:error, error} ->\\n        IO.inspect(error)\\n    end\\n  end\\nend\",\n          perl: \"use strict;\\nuse warnings;\\nuse LWP::UserAgent;\\nuse JSON;\\n\\nmy $ua = LWP::UserAgent->new;\\n\\nmy $req = HTTP::Request->new(GET => 'https://api.lemu.co/api/v1/banks');\\n$req->header('Authorization' => 'Bearer YOUR_API_KEY');\\n\\nmy $resp = $ua->request($req);\\n\\nif ($resp->is_success) {\\n    my $decoded_json = decode_json($resp->decoded_content);\\n    print \\\"Response data: \\\";\\n    use Data::Dumper;\\n    print Dumper($decoded_json);\\n} else {\\n    print \\\"HTTP GET error code: \\\", $resp->code, \\\"\\\\n\\\";\\n    print \\\"HTTP GET error message: \\\", $resp->message, \\\"\\\\n\\\";\\n}\",\n          r: \"library(httr)\\nlibrary(jsonlite)\\n\\nheaders <- add_headers(Authorization = \\\"Bearer YOUR_API_KEY\\\")\\n\\nresponse <- GET(\\\"https://api.lemu.co/api/v1/banks\\\", headers)\\n\\nif (status_code(response) == 200) {\\n  data <- fromJSON(content(response, \\\"text\\\", encoding = \\\"UTF-8\\\"))\\n  print(data)\\n} else {\\n  print(paste(\\\"Error:\\\", status_code(response)))\\n}\",\n          scala: \"import scalaj.http._\\nimport scala.util.parsing.json._\\n\\nobject GetBanks {\\n  def main(args: Array[String]): Unit = {\\n    val response = Http(\\\"https://api.lemu.co/api/v1/banks\\\")\\n      .header(\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\")\\n      .asString\\n      \\n    println(response.body)\\n  }\\n}\",\n          haskell: \"module Main where\\n\\nimport Network.HTTP.Simple\\nimport qualified Data.ByteString.Lazy.Char8 as L8\\n\\nmain :: IO ()\\nmain = do\\n    let request = setRequestMethod \\\"GET\\\"\\n                $ setRequestHeader \\\"Authorization\\\" [\\\"Bearer YOUR_API_KEY\\\"]\\n                $ setRequestSecure True\\n                $ setRequestHost \\\"api.lemu.co\\\"\\n                $ setRequestPath \\\"/api/v1/banks\\\"\\n                $ defaultRequest\\n    \\n    response <- httpLBS request\\n    putStrLn $ \\\"Status code: \\\" ++ show (getResponseStatusCode response)\\n    L8.putStrLn $ getResponseBody response\",\n          clojure: \"(ns lemu.api\\n  (:require [clj-http.client :as client]\\n            [cheshire.core :refer :all]))\\n\\n(defn get-banks []\\n  (let [response (client/get \\\"https://api.lemu.co/api/v1/banks\\\"\\n                            {:headers {\\\"Authorization\\\" \\\"Bearer YOUR_API_KEY\\\"}\\n                             :as :json})]\\n    (println (parse-string (:body response) true))))\",\n          groovy: \"import groovy.json.JsonSlurper\\n\\ndef connection = new URL(\\\"https://api.lemu.co/api/v1/banks\\\").openConnection()\\nconnection.setRequestMethod(\\\"GET\\\")\\nconnection.setRequestProperty(\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\")\\n\\ndef responseCode = connection.responseCode\\n\\nif (responseCode == 200) {\\n    def responseBody = connection.inputStream.text\\n    def jsonSlurper = new JsonSlurper()\\n    def data = jsonSlurper.parseText(responseBody)\\n    println data\\n} else {\\n    println \\\"Error: ${responseCode}\\\"\\n}\",\n          lua: \"local http = require \\\"socket.http\\\"\\nlocal ltn12 = require \\\"ltn12\\\"\\nlocal json = require \\\"cjson\\\"\\n\\nlocal response_body = {}\\nlocal headers = {\\n  Authorization = \\\"Bearer YOUR_API_KEY\\\"\\n}\\n\\nlocal res, code, response_headers = http.request {\\n  url = \\\"https://api.lemu.co/api/v1/banks\\\",\\n  method = \\\"GET\\\",\\n  headers = headers,\\n  sink = ltn12.sink.table(response_body)\\n}\\n\\nif code == 200 then\\n  local response_text = table.concat(response_body)\\n  local data = json.decode(response_text)\\n  print(\\\"Response data: \\\")\\n  for k, v in pairs(data) do\\n    print(k, v)\\n  end\\nelse\\n  print(\\\"Error: \\\" .. code)\\nend\"\n        }\n      },\n      {\n        id: 'verify-bank-account',\n        name: 'Verify Bank Account',\n        description: 'Verify a bank account by providing account details',\n        method: 'POST',\n        url: '/api/v1/banks/verify',\n        headers: {\n          'Authorization': 'Bearer YOUR_API_KEY',\n          'Content-Type': 'application/json'\n        },\n        requestBody: {\n          account_number: '0123456789',\n          bank_code: '011'\n        },\n        responses: {\n          '200': {\n            description: 'Bank account verified successfully',\n            example: {\n              status: 'success',\n              data: {\n                account_number: '0123456789',\n                account_name: 'John Doe',\n                bank_code: '011',\n                bank_name: 'First Bank'\n              }\n            }\n          },\n          '400': {\n            description: 'Bad request: Invalid account details',\n            example: {\n              status: 'error',\n              code: 'invalid_account',\n              message: 'Could not resolve account details'\n            }\n          },\n          '401': {\n            description: 'Unauthorized: Invalid or missing API key',\n            example: {\n              status: 'error',\n              code: 'unauthorized',\n              message: 'Invalid API key provided'\n            }\n          }\n        },\n        sampleCode: {\n          curl: \"curl -X POST 'https://api.lemu.africa/v1/banks/verify' \\\\\\n  -H 'Authorization: Bearer YOUR_API_KEY' \\\\\\n  -H 'Content-Type: application/json' \\\\\\n  -d '{\\\"account_number\\\":\\\"0123456789\\\",\\\"bank_code\\\":\\\"011\\\"}'\",\n          javascript: \"// Using browser Fetch API\\nconst verifyAccount = async () => {\\n  try {\\n    const response = await fetch('https://api.lemu.africa/v1/banks/verify', {\\n      method: 'POST',\\n      headers: {\\n        'Authorization': 'Bearer YOUR_API_KEY',\\n        'Content-Type': 'application/json'\\n      },\\n      body: JSON.stringify({\\n        account_number: '0123456789',\\n        bank_code: '011'\\n      })\\n    });\\n    const data = await response.json();\\n    return data;\\n  } catch (error) {\\n    console.error('Error verifying account:', error);\\n  }\\n};\",\n          nodejs: \"// Using Node.js with axios\\nconst axios = require('axios');\\n\\nasync function verifyAccount() {\\n  try {\\n    const response = await axios({\\n      method: 'post',\\n      url: 'https://api.lemu.africa/v1/banks/verify',\\n      headers: {\\n        'Authorization': 'Bearer YOUR_API_KEY',\\n        'Content-Type': 'application/json'\\n      },\\n      data: {\\n        account_number: '0123456789',\\n        bank_code: '011'\\n      }\\n    });\\n    \\n    return response.data;\\n  } catch (error) {\\n    console.error('Error verifying account:', error.response?.data || error.message);\\n  }\\n}\",\n          python: \"import requests\\nimport json\\n\\nheaders = {\\n    'Authorization': 'Bearer YOUR_API_KEY',\\n    'Content-Type': 'application/json'\\n}\\n\\npayload = {\\n    'account_number': '0123456789',\\n    'bank_code': '011'\\n}\\n\\nresponse = requests.post('https://api.lemu.africa/v1/banks/verify', headers=headers, data=json.dumps(payload))\\ndata = response.json()\\nprint(data)\",\n          ruby: \"require 'net/http'\\nrequire 'uri'\\nrequire 'json'\\n\\nuri = URI.parse('https://api.lemu.africa/v1/banks/verify')\\nrequest = Net::HTTP::Post.new(uri)\\nrequest['Authorization'] = 'Bearer YOUR_API_KEY'\\nrequest['Content-Type'] = 'application/json'\\nrequest.body = JSON.dump({\\n  'account_number' => '0123456789',\\n  'bank_code' => '011'\\n})\\n\\nresponse = Net::HTTP.start(uri.hostname, uri.port, use_ssl: uri.scheme == 'https') do |http|\\n  http.request(request)\\nend\\n\\nputs JSON.parse(response.body)\",\n          php: \"<?php\\n$curl = curl_init();\\n\\n$payload = json_encode([\\n  'account_number' => '0123456789',\\n  'bank_code' => '011'\\n]);\\n\\ncurl_setopt_array($curl, [\\n  CURLOPT_URL => \\\"https://api.lemu.africa/v1/banks/verify\\\",\\n  CURLOPT_RETURNTRANSFER => true,\\n  CURLOPT_POST => true,\\n  CURLOPT_POSTFIELDS => $payload,\\n  CURLOPT_HTTPHEADER => [\\n    \\\"Authorization: Bearer YOUR_API_KEY\\\",\\n    \\\"Content-Type: application/json\\\",\\n    \\\"Content-Length: \\\" . strlen($payload)\\n  ],\\n]);\\n\\n$response = curl_exec($curl);\\ncurl_close($curl);\\n\\necho $response;\\n?>\",\n          go: \"package main\\n\\nimport (\\n\\t\\\"bytes\\\"\\n\\t\\\"encoding/json\\\"\\n\\t\\\"fmt\\\"\\n\\t\\\"io/ioutil\\\"\\n\\t\\\"net/http\\\"\\n)\\n\\nfunc main() {\\n\\tpayload, _ := json.Marshal(map[string]string{\\n\\t\\t\\\"account_number\\\": \\\"0123456789\\\",\\n\\t\\t\\\"bank_code\\\":     \\\"011\\\",\\n\\t})\\n\\n\\tclient := &http.Client{}\\n\\treq, _ := http.NewRequest(\\\"POST\\\", \\\"https://api.lemu.africa/v1/banks/verify\\\", bytes.NewBuffer(payload))\\n\\treq.Header.Add(\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\")\\n\\treq.Header.Add(\\\"Content-Type\\\", \\\"application/json\\\")\\n\\n\\tresp, err := client.Do(req)\\n\\tif err != nil {\\n\\t\\tfmt.Println(\\\"Error:\\\", err)\\n\\t\\treturn\\n\\t}\\n\\tdefer resp.Body.Close()\\n\\n\\tbody, _ := ioutil.ReadAll(resp.Body)\\n\\tfmt.Println(string(body))\\n}\",\n          java: \"import java.io.OutputStream;\\nimport java.net.HttpURLConnection;\\nimport java.net.URL;\\nimport java.nio.charset.StandardCharsets;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class VerifyBankAccount {\\n    public static void main(String[] args) {\\n        try {\\n            URL url = new URL(\\\"https://api.lemu.africa/v1/banks/verify\\\");\\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\\n            conn.setRequestMethod(\\\"POST\\\");\\n            conn.setRequestProperty(\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\");\\n            conn.setRequestProperty(\\\"Content-Type\\\", \\\"application/json\\\");\\n            conn.setDoOutput(true);\\n\\n            String jsonInputString = \\\"{\\\\\\\"account_number\\\\\\\":\\\\\\\"0123456789\\\\\\\",\\\\\\\"bank_code\\\\\\\":\\\\\\\"011\\\\\\\"}\\\";\\n            \\n            try(OutputStream os = conn.getOutputStream()) {\\n                byte[] input = jsonInputString.getBytes(StandardCharsets.UTF_8);\\n                os.write(input, 0, input.length);\\n            }\\n\\n            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\\n            String inputLine;\\n            StringBuilder response = new StringBuilder();\\n            while ((inputLine = in.readLine()) != null) {\\n                response.append(inputLine);\\n            }\\n            in.close();\\n\\n            System.out.println(response.toString());\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}\",\n          csharp: \"using System;\\nusing System.Net.Http;\\nusing System.Text;\\nusing System.Threading.Tasks;\\nusing System.Text.Json;\\n\\nnamespace LemuApiExample\\n{\\n    class Program\\n    {\\n        static async Task Main(string[] args)\\n        {\\n            using (HttpClient client = new HttpClient())\\n            {\\n                client.DefaultRequestHeaders.Add(\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\");\\n                \\n                var requestData = new {\\n                    account_number = \\\"0123456789\\\",\\n                    bank_code = \\\"011\\\"\\n                };\\n                \\n                var content = new StringContent(\\n                    JsonSerializer.Serialize(requestData),\\n                    Encoding.UTF8,\\n                    \\\"application/json\\\");\\n                \\n                HttpResponseMessage response = await client.PostAsync(\\n                    \\\"https://api.lemu.africa/v1/banks/verify\\\", \\n                    content);\\n                \\n                string responseBody = await response.Content.ReadAsStringAsync();\\n                Console.WriteLine(responseBody);\\n            }\\n        }\\n    }\\n}\"\n        }\n      }\n    ]\n  },\n  {\n    id: 'transactions',\n    name: 'Transactions',\n    description: 'Initiate and manage financial transactions',\n    endpoints: [\n      {\n        id: 'initiate-transfer',\n        name: 'Initiate Transfer',\n        description: 'Initiate a transfer from your wallet to a bank account',\n        method: 'POST',\n        url: '/api/v1/transactions/transfer',\n        headers: {\n          'Authorization': 'Bearer YOUR_API_KEY',\n          'Content-Type': 'application/json'\n        },\n        requestBody: {\n          amount: 5000,\n          account_number: '0123456789',\n          bank_code: '011',\n          description: 'Payment for services',\n          reference: 'TR_123456789'\n        },\n        responses: {\n          '200': {\n            description: 'Transfer initiated successfully',\n            example: {\n              status: 'success',\n              data: {\n                id: 'txn_123abc',\n                amount: 5000,\n                recipient: {\n                  account_number: '0123456789',\n                  bank_code: '011',\n                  account_name: 'John Doe'\n                },\n                description: 'Payment for services',\n                reference: 'TR_123456789',\n                status: 'pending',\n                created_at: '2023-01-01T12:00:00Z'\n              }\n            }\n          },\n          '400': {\n            description: 'Bad request: Invalid transfer details',\n            example: {\n              status: 'error',\n              code: 'invalid_transfer',\n              message: 'Invalid transfer details provided'\n            }\n          },\n          '401': {\n            description: 'Unauthorized: Invalid or missing API key',\n            example: {\n              status: 'error',\n              code: 'unauthorized',\n              message: 'Invalid API key provided'\n            }\n          },\n          '422': {\n            description: 'Insufficient funds in wallet',\n            example: {\n              status: 'error',\n              code: 'insufficient_funds',\n              message: 'Insufficient funds in wallet'\n            }\n          }\n        },\n        sampleCode: {\n          curl: \"curl -X POST 'https://api.lemu.africa/v1/transactions/transfer' \\\\\\n  -H 'Authorization: Bearer YOUR_API_KEY' \\\\\\n  -H 'Content-Type: application/json' \\\\\\n  -d '{\\n    \\\"amount\\\": 5000,\\n    \\\"account_number\\\": \\\"0123456789\\\",\\n    \\\"bank_code\\\": \\\"011\\\",\\n    \\\"description\\\": \\\"Payment for services\\\",\\n    \\\"reference\\\": \\\"TR_123456789\\\"\\n  }'\",\n          javascript: \"// Using browser Fetch API\\nconst initiateTransfer = async () => {\\n  try {\\n    const response = await fetch('https://api.lemu.africa/v1/transactions/transfer', {\\n      method: 'POST',\\n      headers: {\\n        'Authorization': 'Bearer YOUR_API_KEY',\\n        'Content-Type': 'application/json'\\n      },\\n      body: JSON.stringify({\\n        amount: 5000,\\n        account_number: '0123456789',\\n        bank_code: '011',\\n        description: 'Payment for services',\\n        reference: 'TR_123456789'\\n      })\\n    });\\n    const data = await response.json();\\n    return data;\\n  } catch (error) {\\n    console.error('Error initiating transfer:', error);\\n  }\\n};\",\n          nodejs: \"// Using Node.js with axios\\nconst axios = require('axios');\\n\\nasync function initiateTransfer() {\\n  try {\\n    const response = await axios({\\n      method: 'post',\\n      url: 'https://api.lemu.africa/v1/transactions/transfer',\\n      headers: {\\n        'Authorization': 'Bearer YOUR_API_KEY',\\n        'Content-Type': 'application/json'\\n      },\\n      data: {\\n        amount: 5000,\\n        account_number: '0123456789',\\n        bank_code: '011',\\n        description: 'Payment for services',\\n        reference: 'TR_123456789'\\n      }\\n    });\\n    \\n    return response.data;\\n  } catch (error) {\\n    console.error('Error initiating transfer:', error.response?.data || error.message);\\n  }\\n}\",\n          python: \"import requests\\nimport json\\n\\nheaders = {\\n    'Authorization': 'Bearer YOUR_API_KEY',\\n    'Content-Type': 'application/json'\\n}\\n\\npayload = {\\n    'amount': 5000,\\n    'account_number': '0123456789',\\n    'bank_code': '011',\\n    'description': 'Payment for services',\\n    'reference': 'TR_123456789'\\n}\\n\\nresponse = requests.post('https://api.lemu.africa/v1/transactions/transfer', headers=headers, data=json.dumps(payload))\\ndata = response.json()\\nprint(data)\",\n          ruby: \"require 'net/http'\\nrequire 'uri'\\nrequire 'json'\\n\\nuri = URI.parse('https://api.lemu.africa/v1/transactions/transfer')\\nrequest = Net::HTTP::Post.new(uri)\\nrequest['Authorization'] = 'Bearer YOUR_API_KEY'\\nrequest['Content-Type'] = 'application/json'\\nrequest.body = JSON.dump({\\n  'amount' => 5000,\\n  'account_number' => '0123456789',\\n  'bank_code' => '011',\\n  'description' => 'Payment for services',\\n  'reference' => 'TR_123456789'\\n})\\n\\nresponse = Net::HTTP.start(uri.hostname, uri.port, use_ssl: uri.scheme == 'https') do |http|\\n  http.request(request)\\nend\\n\\nputs JSON.parse(response.body)\",\n          php: \"<?php\\n$curl = curl_init();\\n\\n$payload = json_encode([\\n  'amount' => 5000,\\n  'account_number' => '0123456789',\\n  'bank_code' => '011',\\n  'description' => 'Payment for services',\\n  'reference' => 'TR_123456789'\\n]);\\n\\ncurl_setopt_array($curl, [\\n  CURLOPT_URL => \\\"https://api.lemu.africa/v1/transactions/transfer\\\",\\n  CURLOPT_RETURNTRANSFER => true,\\n  CURLOPT_POST => true,\\n  CURLOPT_POSTFIELDS => $payload,\\n  CURLOPT_HTTPHEADER => [\\n    \\\"Authorization: Bearer YOUR_API_KEY\\\",\\n    \\\"Content-Type: application/json\\\",\\n    \\\"Content-Length: \\\" . strlen($payload)\\n  ],\\n]);\\n\\n$response = curl_exec($curl);\\ncurl_close($curl);\\n\\necho $response;\\n?>\",\n          go: \"package main\\n\\nimport (\\n\\t\\\"bytes\\\"\\n\\t\\\"encoding/json\\\"\\n\\t\\\"fmt\\\"\\n\\t\\\"io/ioutil\\\"\\n\\t\\\"net/http\\\"\\n)\\n\\nfunc main() {\\n\\tpayload, _ := json.Marshal(map[string]interface{}{\\n\\t\\t\\\"amount\\\": 5000,\\n\\t\\t\\\"account_number\\\": \\\"0123456789\\\",\\n\\t\\t\\\"bank_code\\\": \\\"011\\\",\\n\\t\\t\\\"description\\\": \\\"Payment for services\\\",\\n\\t\\t\\\"reference\\\": \\\"TR_123456789\\\",\\n\\t})\\n\\n\\tclient := &http.Client{}\\n\\treq, _ := http.NewRequest(\\\"POST\\\", \\\"https://api.lemu.africa/v1/transactions/transfer\\\", bytes.NewBuffer(payload))\\n\\treq.Header.Add(\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\")\\n\\treq.Header.Add(\\\"Content-Type\\\", \\\"application/json\\\")\\n\\n\\tresp, err := client.Do(req)\\n\\tif err != nil {\\n\\t\\tfmt.Println(\\\"Error:\\\", err)\\n\\t\\treturn\\n\\t}\\n\\tdefer resp.Body.Close()\\n\\n\\tbody, _ := ioutil.ReadAll(resp.Body)\\n\\tfmt.Println(string(body))\\n}\",\n          java: \"import java.io.OutputStream;\\nimport java.net.HttpURLConnection;\\nimport java.net.URL;\\nimport java.nio.charset.StandardCharsets;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class InitiateTransfer {\\n    public static void main(String[] args) {\\n        try {\\n            URL url = new URL(\\\"https://api.lemu.africa/v1/transactions/transfer\\\");\\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\\n            conn.setRequestMethod(\\\"POST\\\");\\n            conn.setRequestProperty(\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\");\\n            conn.setRequestProperty(\\\"Content-Type\\\", \\\"application/json\\\");\\n            conn.setDoOutput(true);\\n\\n            String jsonInputString = \\\"{\\\\\\\"amount\\\\\\\":5000,\\\\\\\"account_number\\\\\\\":\\\\\\\"0123456789\\\\\\\",\\\\\\\"bank_code\\\\\\\":\\\\\\\"011\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Payment for services\\\\\\\",\\\\\\\"reference\\\\\\\":\\\\\\\"TR_123456789\\\\\\\"}\\\";\\n            \\n            try(OutputStream os = conn.getOutputStream()) {\\n                byte[] input = jsonInputString.getBytes(StandardCharsets.UTF_8);\\n                os.write(input, 0, input.length);\\n            }\\n\\n            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\\n            String inputLine;\\n            StringBuilder response = new StringBuilder();\\n            while ((inputLine = in.readLine()) != null) {\\n                response.append(inputLine);\\n            }\\n            in.close();\\n\\n            System.out.println(response.toString());\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}\",\n          csharp: \"using System;\\nusing System.Net.Http;\\nusing System.Text;\\nusing System.Threading.Tasks;\\nusing System.Text.Json;\\n\\nnamespace LemuApiExample\\n{\\n    class Program\\n    {\\n        static async Task Main(string[] args)\\n        {\\n            using (HttpClient client = new HttpClient())\\n            {\\n                client.DefaultRequestHeaders.Add(\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\");\\n                \\n                var requestData = new {\\n                    amount = 5000,\\n                    account_number = \\\"0123456789\\\",\\n                    bank_code = \\\"011\\\",\\n                    description = \\\"Payment for services\\\",\\n                    reference = \\\"TR_123456789\\\"\\n                };\\n                \\n                var content = new StringContent(\\n                    JsonSerializer.Serialize(requestData),\\n                    Encoding.UTF8,\\n                    \\\"application/json\\\");\\n                \\n                HttpResponseMessage response = await client.PostAsync(\\n                    \\\"https://api.lemu.africa/v1/transactions/transfer\\\", \\n                    content);\\n                \\n                string responseBody = await response.Content.ReadAsStringAsync();\\n                Console.WriteLine(responseBody);\\n            }\\n        }\\n    }\\n}\"\n        }\n      },\n      {\n        id: 'get-transaction',\n        name: 'Get Transaction',\n        description: 'Retrieve details of a specific transaction',\n        method: 'GET',\n        url: '/api/v1/transactions/{id}',\n        headers: {\n          'Authorization': 'Bearer YOUR_API_KEY',\n          'Content-Type': 'application/json'\n        },\n        parameters: {\n          id: {\n            type: 'string',\n            description: 'Unique identifier for the transaction',\n            required: true\n          }\n        },\n        responses: {\n          '200': {\n            description: 'Transaction details retrieved successfully',\n            example: {\n              status: 'success',\n              data: {\n                id: 'txn_123abc',\n                amount: 5000,\n                recipient: {\n                  account_number: '0123456789',\n                  bank_code: '011',\n                  account_name: 'John Doe'\n                },\n                description: 'Payment for services',\n                reference: 'TR_123456789',\n                status: 'success',\n                created_at: '2023-01-01T12:00:00Z',\n                updated_at: '2023-01-01T12:05:00Z'\n              }\n            }\n          },\n          '404': {\n            description: 'Transaction not found',\n            example: {\n              status: 'error',\n              code: 'not_found',\n              message: 'Transaction not found'\n            }\n          },\n          '401': {\n            description: 'Unauthorized: Invalid or missing API key',\n            example: {\n              status: 'error',\n              code: 'unauthorized',\n              message: 'Invalid API key provided'\n            }\n          }\n        },\n        sampleCode: {\n          curl: \"curl -X GET 'https://api.lemu.africa/v1/transactions/txn_123abc' \\\\\\n  -H 'Authorization: Bearer YOUR_API_KEY'\",\n          javascript: \"const getTransaction = async (transactionId) => {\\n  try {\\n    const response = await fetch(`https://api.lemu.africa/v1/transactions/${transactionId}`, {\\n      method: 'GET',\\n      headers: {\\n        'Authorization': 'Bearer YOUR_API_KEY',\\n        'Content-Type': 'application/json'\\n      }\\n    });\\n    const data = await response.json();\\n    return data;\\n  } catch (error) {\\n    console.error('Error fetching transaction:', error);\\n  }\\n};\",\n          python: \"import requests\\n\\nheaders = {\\n    'Authorization': 'Bearer YOUR_API_KEY',\\n    'Content-Type': 'application/json'\\n}\\n\\ntransaction_id = 'txn_123abc'\\nresponse = requests.get(f'https://api.lemu.africa/v1/transactions/{transaction_id}', headers=headers)\\ndata = response.json()\\nprint(data)\"\n        }\n      }\n    ]\n  },\n  {\n    id: 'webhooks',\n    name: 'Webhooks',\n    description: 'Configure and manage webhooks for real-time notifications',\n    endpoints: [\n      {\n        id: 'create-webhook',\n        name: 'Create Webhook',\n        description: 'Create a webhook to receive notifications for specific events',\n        method: 'POST',\n        url: '/api/v1/webhooks',\n        headers: {\n          'Authorization': 'Bearer YOUR_API_KEY',\n          'Content-Type': 'application/json'\n        },\n        requestBody: {\n          url: 'https://your-domain.com/webhook',\n          events: ['transaction.success', 'transaction.failed'],\n          description: 'Webhook for transaction events'\n        },\n        responses: {\n          '201': {\n            description: 'Webhook created successfully',\n            example: {\n              status: 'success',\n              data: {\n                id: 'wh_123abc',\n                url: 'https://your-domain.com/webhook',\n                events: ['transaction.success', 'transaction.failed'],\n                description: 'Webhook for transaction events',\n                active: true,\n                created_at: '2023-01-01T12:00:00Z'\n              }\n            }\n          },\n          '400': {\n            description: 'Bad request: Invalid webhook details',\n            example: {\n              status: 'error',\n              code: 'invalid_webhook',\n              message: 'Invalid webhook URL provided'\n            }\n          },\n          '401': {\n            description: 'Unauthorized: Invalid or missing API key',\n            example: {\n              status: 'error',\n              code: 'unauthorized',\n              message: 'Invalid API key provided'\n            }\n          }\n        },\n        sampleCode: {\n          curl: \"curl -X POST 'https://api.lemu.africa/v1/webhooks' \\\\\\n  -H 'Authorization: Bearer YOUR_API_KEY' \\\\\\n  -H 'Content-Type: application/json' \\\\\\n  -d '{\\n    \\\"url\\\": \\\"https://your-domain.com/webhook\\\",\\n    \\\"events\\\": [\\\"transaction.success\\\", \\\"transaction.failed\\\"],\\n    \\\"description\\\": \\\"Webhook for transaction events\\\"\\n  }'\",\n          javascript: \"const createWebhook = async () => {\\n  try {\\n    const response = await fetch('https://api.lemu.africa/v1/webhooks', {\\n      method: 'POST',\\n      headers: {\\n        'Authorization': 'Bearer YOUR_API_KEY',\\n        'Content-Type': 'application/json'\\n      },\\n      body: JSON.stringify({\\n        url: 'https://your-domain.com/webhook',\\n        events: ['transaction.success', 'transaction.failed'],\\n        description: 'Webhook for transaction events'\\n      })\\n    });\\n    const data = await response.json();\\n    return data;\\n  } catch (error) {\\n    console.error('Error creating webhook:', error);\\n  }\\n};\",\n          python: \"import requests\\nimport json\\n\\nheaders = {\\n    'Authorization': 'Bearer YOUR_API_KEY',\\n    'Content-Type': 'application/json'\\n}\\n\\npayload = {\\n    'url': 'https://your-domain.com/webhook',\\n    'events': ['transaction.success', 'transaction.failed'],\\n    'description': 'Webhook for transaction events'\\n}\\n\\nresponse = requests.post('https://api.lemu.africa/v1/webhooks', headers=headers, data=json.dumps(payload))\\ndata = response.json()\\nprint(data)\"\n        }\n      },\n      {\n        id: 'list-webhooks',\n        name: 'List Webhooks',\n        description: 'Retrieve a list of all webhooks configured for your account',\n        method: 'GET',\n        url: '/api/v1/webhooks',\n        headers: {\n          'Authorization': 'Bearer YOUR_API_KEY',\n          'Content-Type': 'application/json'\n        },\n        responses: {\n          '200': {\n            description: 'List of webhooks retrieved successfully',\n            example: {\n              status: 'success',\n              data: {\n                webhooks: [\n                  {\n                    id: 'wh_123abc',\n                    url: 'https://your-domain.com/webhook',\n                    events: ['transaction.success', 'transaction.failed'],\n                    description: 'Webhook for transaction events',\n                    active: true,\n                    created_at: '2023-01-01T12:00:00Z'\n                  },\n                  {\n                    id: 'wh_456def',\n                    url: 'https://your-domain.com/other-webhook',\n                    events: ['account.created'],\n                    description: 'Webhook for account events',\n                    active: true,\n                    created_at: '2023-01-02T12:00:00Z'\n                  }\n                ]\n              }\n            }\n          },\n          '401': {\n            description: 'Unauthorized: Invalid or missing API key',\n            example: {\n              status: 'error',\n              code: 'unauthorized',\n              message: 'Invalid API key provided'\n            }\n          }\n        },\n        sampleCode: {\n          curl: \"curl -X GET 'https://api.lemu.africa/v1/webhooks' \\\\\\n  -H 'Authorization: Bearer YOUR_API_KEY'\",\n          javascript: \"const fetchWebhooks = async () => {\\n  try {\\n    const response = await fetch('https://api.lemu.africa/v1/webhooks', {\\n      method: 'GET',\\n      headers: {\\n        'Authorization': 'Bearer YOUR_API_KEY',\\n        'Content-Type': 'application/json'\\n      }\\n    });\\n    const data = await response.json();\\n    return data;\\n  } catch (error) {\\n    console.error('Error fetching webhooks:', error);\\n  }\\n};\",\n          python: \"import requests\\n\\nheaders = {\\n    'Authorization': 'Bearer YOUR_API_KEY',\\n    'Content-Type': 'application/json'\\n}\\n\\nresponse = requests.get('https://api.lemu.africa/v1/webhooks', headers=headers)\\ndata = response.json()\\nprint(data)\"\n        }\n      }\n    ]\n  }\n]; "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 415, "column": 0}, "map": {"version":3,"sources":["file:///Users/mac/Documents/workstation/2025/lemu-project/developer/src/app/components/ApiSidebar.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport { API_DATA } from '@/app/api/apiData';\n\ninterface ApiSidebarProps {\n  activeEndpoint?: string;\n}\n\nexport default function ApiSidebar({ activeEndpoint }: ApiSidebarProps) {\n  const [expandedCategories, setExpandedCategories] = useState<string[]>(API_DATA.map(cat => cat.name));\n\n  const toggleCategory = (categoryName: string) => {\n    if (expandedCategories.includes(categoryName)) {\n      setExpandedCategories(expandedCategories.filter(name => name !== categoryName));\n    } else {\n      setExpandedCategories([...expandedCategories, categoryName]);\n    }\n  };\n\n  return (\n    <div className=\"hidden md:block w-64 flex-shrink-0 bg-bg-secondary border-r border-border-color overflow-y-auto\">\n      <div className=\"p-6\">\n        <div className=\"flex items-center mb-6\">\n          <div className=\"h-8 w-8 rounded-full bg-bg-tertiary flex items-center justify-center text-text-primary font-bold text-md\">\n            L\n          </div>\n          <h2 className=\"ml-2 text-lg font-semibold text-text-primary\">API Reference</h2>\n        </div>\n        \n        <div className=\"space-y-6\">\n          <div>\n            <Link \n              href=\"/authentication\"\n              className={`block px-3 py-2 rounded-md text-sm font-medium ${\n                activeEndpoint === 'authentication' \n                ? 'bg-accent-color text-white' \n                : 'text-text-secondary hover:text-text-primary hover:bg-bg-tertiary/50'\n              }`}\n            >\n              Authentication\n            </Link>\n          </div>\n          \n          <div>\n            <Link \n              href=\"/errors\"\n              className={`block px-3 py-2 rounded-md text-sm font-medium ${\n                activeEndpoint === 'errors' \n                ? 'bg-accent-color text-white' \n                : 'text-text-secondary hover:text-text-primary hover:bg-bg-tertiary/50'\n              }`}\n            >\n              Errors\n            </Link>\n          </div>\n\n          {API_DATA.map((category) => (\n            <div key={category.name}>\n              <h3 className=\"font-medium text-text-primary text-xs uppercase tracking-wide pt-4 px-3 mb-2\">\n                {category.name}\n              </h3>\n              <div className=\"space-y-1\">\n                {category.endpoints.map((endpoint) => (\n                  <Link\n                    key={endpoint.id}\n                    href={`/reference/${endpoint.id}`}\n                    className={`block px-3 py-2 rounded-md text-sm font-medium ${\n                      activeEndpoint === endpoint.id\n                      ? 'bg-accent-color text-white'\n                      : 'text-text-secondary hover:text-text-primary hover:bg-bg-tertiary/50'\n                    }`}\n                  >\n                    <div className=\"flex items-center\">\n                      <span className={`inline-block w-12 text-xs font-mono mr-2 text-center px-1 py-0.5 rounded \n                        ${endpoint.method === 'GET' ? 'method-get' : ''}\n                        ${endpoint.method === 'POST' ? 'method-post' : ''}\n                        ${endpoint.method === 'PUT' ? 'method-put' : ''}\n                        ${endpoint.method === 'DELETE' ? 'method-delete' : ''}\n                      `}>\n                        {endpoint.method}\n                      </span>\n                      <span className=\"truncate\">{endpoint.name}</span>\n                    </div>\n                  </Link>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n} "],"names":[],"mappings":";;;;AAEA;AACA;AACA;;;AAJA;;;;AAUe,SAAS,WAAW,EAAE,cAAc,EAAmB;;IACpE,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAY,+HAAA,CAAA,WAAQ,CAAC,GAAG;+BAAC,CAAA,MAAO,IAAI,IAAI;;IAEnG,MAAM,iBAAiB,CAAC;QACtB,IAAI,mBAAmB,QAAQ,CAAC,eAAe;YAC7C,sBAAsB,mBAAmB,MAAM,CAAC,CAAA,OAAQ,SAAS;QACnE,OAAO;YACL,sBAAsB;mBAAI;gBAAoB;aAAa;QAC7D;IACF;IAEA,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;sCAA2G;;;;;;sCAG1H,6LAAC;4BAAG,WAAU;sCAA+C;;;;;;;;;;;;8BAG/D,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;sCACC,cAAA,6LAAC,+JAAA,CAAA,UAAI;gCACH,MAAK;gCACL,WAAW,CAAC,+CAA+C,EACzD,mBAAmB,mBACjB,+BACA,uEACF;0CACH;;;;;;;;;;;sCAKH,6LAAC;sCACC,cAAA,6LAAC,+JAAA,CAAA,UAAI;gCACH,MAAK;gCACL,WAAW,CAAC,+CAA+C,EACzD,mBAAmB,WACjB,+BACA,uEACF;0CACH;;;;;;;;;;;wBAKF,+HAAA,CAAA,WAAQ,CAAC,GAAG,CAAC,CAAC,yBACb,6LAAC;;kDACC,6LAAC;wCAAG,WAAU;kDACX,SAAS,IAAI;;;;;;kDAEhB,6LAAC;wCAAI,WAAU;kDACZ,SAAS,SAAS,CAAC,GAAG,CAAC,CAAC,yBACvB,6LAAC,+JAAA,CAAA,UAAI;gDAEH,MAAM,CAAC,WAAW,EAAE,SAAS,EAAE,EAAE;gDACjC,WAAW,CAAC,+CAA+C,EACzD,mBAAmB,SAAS,EAAE,GAC5B,+BACA,uEACF;0DAEF,cAAA,6LAAC;oDAAI,WAAU;;sEACb,6LAAC;4DAAK,WAAW,CAAC;wBAChB,EAAE,SAAS,MAAM,KAAK,QAAQ,eAAe,GAAG;wBAChD,EAAE,SAAS,MAAM,KAAK,SAAS,gBAAgB,GAAG;wBAClD,EAAE,SAAS,MAAM,KAAK,QAAQ,eAAe,GAAG;wBAChD,EAAE,SAAS,MAAM,KAAK,WAAW,kBAAkB,GAAG;sBACxD,CAAC;sEACE,SAAS,MAAM;;;;;;sEAElB,6LAAC;4DAAK,WAAU;sEAAY,SAAS,IAAI;;;;;;;;;;;;+CAjBtC,SAAS,EAAE;;;;;;;;;;;+BAPd,SAAS,IAAI;;;;;;;;;;;;;;;;;;;;;;AAmCnC;GApFwB;KAAA","debugId":null}},
    {"offset": {"line": 598, "column": 0}, "map": {"version":3,"sources":["file:///Users/mac/Documents/workstation/2025/lemu-project/developer/src/app/components/EndpointDetails.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { Endpoint } from '@/app/api/apiData';\nimport React from 'react';\n\ninterface EndpointDetailsProps {\n  endpoint: Endpoint;\n}\n\n// Define the code language keys matching the Endpoint interface\ntype SupportedCodeLanguageKey = \n  'curl' | 'javascript' | 'python' | 'ruby' | 'go' | 'java' | 'csharp' | 'php' | 'nodejs' |\n  'kotlin' | 'swift' | 'rust' | 'dart' | 'elixir' | 'powershell' | 'bash' | 'perl' | 'r' | \n  'scala' | 'haskell' | 'clojure' | 'typescript' | 'groovy' | 'lua';\n\n// Define all potential code languages for display\nconst CODE_LANGUAGES: Record<string, string> = {\n  curl: 'cURL',\n  javascript: 'JavaScript',\n  nodejs: 'Node.js',\n  python: 'Python',\n  ruby: 'Ruby',\n  go: 'Go',\n  java: 'Java',\n  csharp: 'C#',\n  php: 'PHP',\n  kotlin: 'Kotlin',\n  swift: 'Swift',\n  rust: 'Rust',\n  dart: 'Dart',\n  elixir: 'Elixir',\n  powershell: 'PowerShell',\n  bash: 'Bash',\n  perl: 'Perl',\n  r: 'R',\n  scala: 'Scala',\n  haskell: 'Haskell',\n  clojure: 'Clojure',\n  typescript: 'TypeScript',\n  groovy: 'Groovy',\n  lua: 'Lua'\n};\n\ntype HeaderValue = string | {\n  type: string;\n  description?: string;\n};\n\ntype RequestBodyParam = {\n  type: string;\n  required: boolean;\n  description: string;\n};\n\n// Helper function to format code for VS Code-like syntax highlighting \nfunction formatVSCodeNodeJs(code: string): React.ReactNode {\n  // Split the code into lines to apply line numbers\n  const lines = code.split('\\n');\n  \n  // Function to tokenize different parts of the code\n  const tokenize = (line: string): string => {\n    let tokenized = line;\n    \n    // Process in specific order to avoid conflicts\n\n    // Comments first (so we don't highlight strings inside comments)\n    tokenized = tokenized.replace(/(\\/\\/.*$)/g, '<span class=\"token-comment\">$1</span>');\n    \n    // Keywords\n    tokenized = tokenized.replace(/\\b(const|let|var|function|async|await|return|if|else|try|catch|for|while|import|from|export|default)\\b/g, \n      '<span class=\"token-const\">$1</span>');\n    \n    // Function declarations - this needs to happen before method calls\n    tokenized = tokenized.replace(/\\b(function)\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)/g, \n      '<span class=\"token-const\">$1</span> <span class=\"token-function-name\">$2</span>');\n    \n    // Async function declarations\n    tokenized = tokenized.replace(/\\b(async)\\s+\\b(function)\\b\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)/g, \n      '<span class=\"token-const\">$1</span> <span class=\"token-const\">$2</span> <span class=\"token-function-name\">$3</span>');\n    \n    // Arrow functions with explicit name (const foo = () => {})\n    tokenized = tokenized.replace(/\\b(const|let|var)\\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*=/g, \n      '<span class=\"token-const\">$1</span> <span class=\"token-function-name\">$2</span> =');\n    \n    // Method calls\n    tokenized = tokenized.replace(/\\b([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*\\(/g, \n      '<span class=\"token-method\">$1</span>(');\n    \n    // String literals - handling both single and double quotes\n    tokenized = tokenized.replace(/(['\"])((?:\\\\\\1|(?:(?!\\1).))*)(\\1)/g, \n      '<span class=\"token-string\">$1$2$3</span>');\n    \n    // Properties (after dot notation)\n    tokenized = tokenized.replace(/\\.([a-zA-Z_$][a-zA-Z0-9_$]*)/g, \n      '.<span class=\"token-property\">$1</span>');\n    \n    // Numbers\n    tokenized = tokenized.replace(/\\b(\\d+\\.?\\d*|\\.\\d+)\\b/g, \n      '<span class=\"token-number\">$1</span>');\n    \n    // Boolean, null, undefined\n    tokenized = tokenized.replace(/\\b(true|false|null|undefined)\\b/g, \n      '<span class=\"token-boolean\">$1</span>');\n    \n    // Common built-in functions and objects\n    tokenized = tokenized.replace(/\\b(require|console|Object|Array|String|Number|Boolean|Math|JSON|Promise)\\b/g, \n      '<span class=\"token-function-name\">$1</span>');\n    \n    // Special operators\n    tokenized = tokenized.replace(/\\b(new|typeof|instanceof)\\b/g, \n      '<span class=\"token-const\">$1</span>');\n    \n    // Object literal keys\n    tokenized = tokenized.replace(/(^\\s*)([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*:/g, \n      '$1<span class=\"token-property\">$2</span>:');\n    \n    return tokenized;\n  };\n\n  // Find a good line to highlight (look for a function call or declaration)\n  let highlightLine = 1; // Default to line 1\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].includes('function') || lines[i].includes('axios(') || lines[i].includes('await')) {\n      highlightLine = i;\n      break;\n    }\n  }\n\n  return (\n    <React.Fragment>\n      {lines.map((line, index) => (\n        <code key={index} className={index === highlightLine ? 'current-line' : ''} dangerouslySetInnerHTML={{ __html: tokenize(line) }} />\n      ))}\n    </React.Fragment>\n  );\n}\n\n// Format JSON with proper VS Code syntax highlighting\nfunction formatVSCodeJson(code: string): React.ReactNode {\n  let jsonObj;\n  try {\n    jsonObj = JSON.parse(code);\n    code = JSON.stringify(jsonObj, null, 2);\n  } catch (e) {\n    // If parsing fails, just use the original code\n  }\n\n  const lines = code.split('\\n');\n  \n  const tokenize = (line: string): string => {\n    let tokenized = line;\n    \n    // Keys in JSON (always in double quotes)\n    tokenized = tokenized.replace(/(\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")\\s*:/g, \n      '<span class=\"token-property\">$1</span>:');\n    \n    // String values\n    tokenized = tokenized.replace(/:\\s*(\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g, \n      ': <span class=\"token-string\">$1</span>');\n    \n    // Numbers\n    tokenized = tokenized.replace(/:\\s*(-?\\d+\\.?\\d*)/g, \n      ': <span class=\"token-number\">$1</span>');\n    \n    // Boolean and null\n    tokenized = tokenized.replace(/:\\s*(true|false|null)/g, \n      ': <span class=\"token-boolean\">$1</span>');\n    \n    return tokenized;\n  };\n  \n  return (\n    <React.Fragment>\n      {lines.map((line, index) => (\n        <code key={index} dangerouslySetInnerHTML={{ __html: tokenize(line) }} />\n      ))}\n    </React.Fragment>\n  );\n}\n\n// Format a code sample with VS Code-like styling based on language\nfunction formatCodeWithVSCode(code: string, language: string): React.ReactNode {\n  switch (language.toLowerCase()) {\n    case 'nodejs':\n    case 'javascript':\n      return formatVSCodeNodeJs(code);\n    case 'json':\n      return formatVSCodeJson(code);\n    // Add other language formatters as needed\n    default:\n      // For other languages just render with line numbers\n      return code.split('\\n').map((line, index) => (\n        <code key={index}>{line}</code>\n      ));\n  }\n}\n\nexport default function EndpointDetails({ endpoint }: EndpointDetailsProps) {\n  const [activeResponse, setActiveResponse] = useState<string>(\n    endpoint.responses && Object.keys(endpoint.responses).length > 0\n      ? Object.keys(endpoint.responses)[0]\n      : ''\n  );\n\n  // Get available code languages from endpoint\n  const availableLanguages = endpoint.sampleCode ? \n    (Object.keys(endpoint.sampleCode).filter(lang => \n      endpoint.sampleCode?.[lang as keyof typeof endpoint.sampleCode]\n    ) as SupportedCodeLanguageKey[]) : [];\n\n  const [activeCodeExample, setActiveCodeExample] = useState<SupportedCodeLanguageKey>(\n    availableLanguages.length > 0 ? availableLanguages[0] : 'curl'\n  );\n\n  const getMethodClass = (method: string) => {\n    switch (method.toUpperCase()) {\n      case 'GET':\n        return 'method-get';\n      case 'POST':\n        return 'method-post';\n      case 'PUT':\n        return 'method-put';\n      case 'DELETE':\n        return 'method-delete';\n      default:\n        return 'bg-bg-tertiary text-text-primary';\n    }\n  };\n\n  const getStatusClass = (status: string) => {\n    const statusCode = parseInt(status);\n    if (statusCode >= 200 && statusCode < 300) {\n      return 'bg-emerald-900/70 text-emerald-300 border-emerald-800/50';\n    } else if (statusCode >= 400) {\n      return 'bg-rose-900/70 text-rose-300 border-rose-800/50';\n    } else {\n      return 'bg-amber-900/70 text-amber-300 border-amber-800/50';\n    }\n  };\n\n  // When rendering a code example\n  const renderVSCodeEditor = (code: string, language: string) => {\n    return (\n      <div className=\"terminal-window border-0 shadow-lg\">\n        <div className=\"terminal-header\">\n          <div className=\"flex items-center\">\n            <span className=\"text-xs text-terminal-header-text mr-2\">{CODE_LANGUAGES[language as SupportedCodeLanguageKey]}</span>\n            <span className=\"text-xs text-terminal-header-text border border-terminal-border rounded px-1\">index.js</span>\n          </div>\n          <div className=\"terminal-controls\">\n            <div className=\"terminal-control bg-red-500 opacity-70\"></div>\n            <div className=\"terminal-control bg-yellow-500 opacity-70\"></div>\n            <div className=\"terminal-control bg-green-500 opacity-70\"></div>\n          </div>\n        </div>\n        <div className=\"terminal-content relative\">\n          <div className=\"vscode-minimap\"></div>\n          <pre>{formatCodeWithVSCode(code, language)}</pre>\n        </div>\n        <div className=\"terminal-status-bar\">\n          <div className=\"terminal-status-left\">\n            <span className=\"editor-extension\">JavaScript</span>\n            <span className=\"editor-extension\">UTF-8</span>\n          </div>\n          <div className=\"terminal-status-right\">\n            <span className=\"line-col-indicator\">Ln 2, Col 12</span>\n            <span className=\"line-col-indicator\">Spaces: 2</span>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"bg-terminal-bg/60 backdrop-blur-sm rounded-xl shadow-xl p-6 relative overflow-hidden\">\n      <div className=\"absolute inset-0 bg-grid-white/[0.02] bg-[size:20px_20px] pointer-events-none\"></div>\n      <div className=\"relative z-10\">\n        <div className=\"flex items-start\">\n          <div className={`${getMethodClass(endpoint.method)} font-mono py-1 px-3 rounded-md text-sm font-semibold mr-2`}>\n            {endpoint.method.toUpperCase()}\n          </div>\n          <h1 className=\"text-2xl font-bold text-text-primary mb-2\">{endpoint.name}</h1>\n        </div>\n        \n        <div className=\"mt-2 flex items-center\">\n          <div className=\"text-text-primary font-mono\">{endpoint.url}</div>\n        </div>\n        \n        <div className=\"mt-6\">\n          <p className=\"text-text-secondary mb-6\">{endpoint.description}</p>\n        </div>\n        \n        {endpoint.headers && Object.keys(endpoint.headers).length > 0 && (\n          <div className=\"mt-8\">\n            <h2 className=\"text-lg font-semibold text-text-primary mt-8 mb-4\">Headers</h2>\n            <div className=\"overflow-hidden shadow-md rounded-lg bg-terminal-header/40\">\n              <table className=\"min-w-full\">\n                <thead className=\"border-b border-terminal-border/50\">\n                  <tr className=\"bg-table-header-bg\">\n                    <th className=\"py-3 px-4 text-left text-sm font-semibold text-text-primary\">KEY</th>\n                    <th className=\"py-3 px-4 text-left text-sm font-semibold text-text-primary\">VALUE</th>\n                    <th className=\"py-3 px-4 text-left text-sm font-semibold text-text-primary\">DESCRIPTION</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-terminal-border/30\">\n                  {Object.entries(endpoint.headers).map(([key, value]) => {\n                    const headerValue = value as HeaderValue;\n                    return (\n                      <tr key={key} className=\"hover:bg-terminal-border/20 transition-colors\">\n                        <td className=\"py-3 px-4 text-sm text-text-primary font-mono\">{key}</td>\n                        <td className=\"py-3 px-4 text-sm text-text-secondary font-mono\">{typeof headerValue === 'string' ? headerValue : headerValue.type}</td>\n                        <td className=\"py-3 px-4 text-sm text-text-secondary\">{typeof headerValue === 'object' && headerValue.description ? headerValue.description : '-'}</td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        )}\n        \n        {endpoint.requestBody && (\n          <div className=\"mt-8\">\n            <h2 className=\"text-lg font-semibold text-text-primary mb-3\">Request Body</h2>\n            <div className=\"overflow-hidden shadow-md rounded-lg bg-terminal-header/40\">\n              <table className=\"min-w-full\">\n                <thead className=\"border-b border-terminal-border/50\">\n                  <tr>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\">\n                      Parameter\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\">\n                      Type\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\">\n                      Required\n                    </th>\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\">\n                      Description\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-terminal-border/30\">\n                  {Object.entries(endpoint.requestBody).map(([key, param]) => {\n                    const requestParam = param as RequestBodyParam;\n                    return (\n                      <tr key={key} className=\"hover:bg-terminal-border/20 transition-colors\">\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-terminal-text\">\n                          {key}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-400\">\n                          {requestParam.type}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-400\">\n                          {requestParam.required ? 'Yes' : 'No'}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-normal text-sm text-gray-400\">\n                          {requestParam.description}\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        )}\n        \n        {endpoint.responses && Object.keys(endpoint.responses).length > 0 && (\n          <div className=\"mt-8\">\n            <div className=\"flex justify-between items-center mb-3\">\n              <h2 className=\"text-lg font-semibold text-text-primary\">Responses</h2>\n              <div className=\"flex overflow-hidden rounded-md bg-terminal-header/60\">\n                {Object.keys(endpoint.responses).map((status, index) => {\n                  const isFirst = index === 0;\n                  const isLast = index === Object.keys(endpoint.responses).length - 1;\n                  let roundedClass = '';\n                  if (isFirst) roundedClass = 'rounded-l-md';\n                  if (isLast) roundedClass += ' rounded-r-md';\n                  \n                  return (\n                    <button\n                      key={status}\n                      onClick={() => setActiveResponse(status)}\n                      className={`px-3 py-1.5 text-sm font-medium transition-all duration-200 border-r last:border-r-0 first:rounded-l-md last:rounded-r-md ${\n                        activeResponse === status\n                          ? `${getStatusClass(status)} shadow-inner`\n                          : 'text-text-secondary hover:bg-bg-tertiary'\n                      }`}\n                    >\n                      {status}\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n            \n            {activeResponse && endpoint.responses[activeResponse] && (\n              <div className=\"bg-terminal-header/40 backdrop-blur-sm rounded-lg p-4 shadow-lg\">\n                <p className=\"text-gray-300 mb-4\">{endpoint.responses[activeResponse].description}</p>\n                {endpoint.responses[activeResponse].example && (\n                  <div className=\"terminal-window border-0\">\n                    <div className=\"terminal-header\">\n                      <div className=\"flex items-center\">\n                        <span className=\"text-xs text-gray-400 mr-2\">JSON</span>\n                        <span className=\"text-xs text-gray-500 border border-gray-700 rounded px-1\">response.json</span>\n                      </div>\n                      <div className=\"terminal-controls\">\n                        <div className=\"terminal-control bg-red-500 opacity-70\"></div>\n                        <div className=\"terminal-control bg-yellow-500 opacity-70\"></div>\n                        <div className=\"terminal-control bg-green-500 opacity-70\"></div>\n                      </div>\n                    </div>\n                    <div className=\"terminal-content relative\">\n                      <div className=\"vscode-minimap\"></div>\n                      <pre>{formatVSCodeJson(JSON.stringify(endpoint.responses[activeResponse].example, null, 2))}</pre>\n                    </div>\n                    <div className=\"terminal-status-bar\">\n                      <div className=\"terminal-status-left\">\n                        <span className=\"editor-extension\">JSON</span>\n                        <span className=\"editor-extension\">UTF-8</span>\n                      </div>\n                      <div className=\"terminal-status-right\">\n                        <span className=\"line-col-indicator\">Ln 1, Col 1</span>\n                        <span className=\"line-col-indicator\">Spaces: 2</span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n        \n        {endpoint.sampleCode && Object.keys(endpoint.sampleCode).length > 0 && (\n          <div className=\"mt-8\">\n            <div className=\"flex justify-between items-center mb-3\">\n              <h2 className=\"text-lg font-semibold text-text-primary\">Code Examples</h2>\n              <div className=\"relative\">\n                <select\n                  value={activeCodeExample}\n                  onChange={(e) => setActiveCodeExample(e.target.value as SupportedCodeLanguageKey)}\n                  className=\"px-3 py-2 text-sm font-medium text-gray-300 bg-terminal-header/80 border border-terminal-border/50 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary appearance-none pl-3 pr-10 bg-none cursor-pointer min-w-[140px]\"\n                  style={{\n                    backgroundImage: \"url(\\\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e\\\")\",\n                    backgroundPosition: \"right 0.5rem center\",\n                    backgroundRepeat: \"no-repeat\",\n                    backgroundSize: \"1.5em 1.5em\"\n                  }}\n                >\n                  {availableLanguages.map(lang => (\n                    <option key={lang} value={lang} className=\"bg-terminal-header text-gray-300\">\n                      {CODE_LANGUAGES[lang]}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n            \n            {endpoint.sampleCode && endpoint.sampleCode[activeCodeExample] && (\n              renderVSCodeEditor(endpoint.sampleCode[activeCodeExample], activeCodeExample)\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n} "],"names":[],"mappings":";;;;AAEA;;;AAFA;;;AAgBA,kDAAkD;AAClD,MAAM,iBAAyC;IAC7C,MAAM;IACN,YAAY;IACZ,QAAQ;IACR,QAAQ;IACR,MAAM;IACN,IAAI;IACJ,MAAM;IACN,QAAQ;IACR,KAAK;IACL,QAAQ;IACR,OAAO;IACP,MAAM;IACN,MAAM;IACN,QAAQ;IACR,YAAY;IACZ,MAAM;IACN,MAAM;IACN,GAAG;IACH,OAAO;IACP,SAAS;IACT,SAAS;IACT,YAAY;IACZ,QAAQ;IACR,KAAK;AACP;AAaA,uEAAuE;AACvE,SAAS,mBAAmB,IAAY;IACtC,kDAAkD;IAClD,MAAM,QAAQ,KAAK,KAAK,CAAC;IAEzB,mDAAmD;IACnD,MAAM,WAAW,CAAC;QAChB,IAAI,YAAY;QAEhB,+CAA+C;QAE/C,iEAAiE;QACjE,YAAY,UAAU,OAAO,CAAC,cAAc;QAE5C,WAAW;QACX,YAAY,UAAU,OAAO,CAAC,2GAC5B;QAEF,mEAAmE;QACnE,YAAY,UAAU,OAAO,CAAC,8CAC5B;QAEF,8BAA8B;QAC9B,YAAY,UAAU,OAAO,CAAC,4DAC5B;QAEF,4DAA4D;QAC5D,YAAY,UAAU,OAAO,CAAC,uDAC5B;QAEF,eAAe;QACf,YAAY,UAAU,OAAO,CAAC,sCAC5B;QAEF,2DAA2D;QAC3D,YAAY,UAAU,OAAO,CAAC,sCAC5B;QAEF,kCAAkC;QAClC,YAAY,UAAU,OAAO,CAAC,iCAC5B;QAEF,UAAU;QACV,YAAY,UAAU,OAAO,CAAC,0BAC5B;QAEF,2BAA2B;QAC3B,YAAY,UAAU,OAAO,CAAC,oCAC5B;QAEF,wCAAwC;QACxC,YAAY,UAAU,OAAO,CAAC,+EAC5B;QAEF,oBAAoB;QACpB,YAAY,UAAU,OAAO,CAAC,gCAC5B;QAEF,sBAAsB;QACtB,YAAY,UAAU,OAAO,CAAC,yCAC5B;QAEF,OAAO;IACT;IAEA,0EAA0E;IAC1E,IAAI,gBAAgB,GAAG,oBAAoB;IAC3C,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAK;QACrC,IAAI,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,eAAe,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,aAAa,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,UAAU;YAC9F,gBAAgB;YAChB;QACF;IACF;IAEA,qBACE,6LAAC,6JAAA,CAAA,UAAK,CAAC,QAAQ;kBACZ,MAAM,GAAG,CAAC,CAAC,MAAM,sBAChB,6LAAC;gBAAiB,WAAW,UAAU,gBAAgB,iBAAiB;gBAAI,yBAAyB;oBAAE,QAAQ,SAAS;gBAAM;eAAnH;;;;;;;;;;AAInB;AAEA,sDAAsD;AACtD,SAAS,iBAAiB,IAAY;IACpC,IAAI;IACJ,IAAI;QACF,UAAU,KAAK,KAAK,CAAC;QACrB,OAAO,KAAK,SAAS,CAAC,SAAS,MAAM;IACvC,EAAE,OAAO,GAAG;IACV,+CAA+C;IACjD;IAEA,MAAM,QAAQ,KAAK,KAAK,CAAC;IAEzB,MAAM,WAAW,CAAC;QAChB,IAAI,YAAY;QAEhB,yCAAyC;QACzC,YAAY,UAAU,OAAO,CAAC,qCAC5B;QAEF,gBAAgB;QAChB,YAAY,UAAU,OAAO,CAAC,qCAC5B;QAEF,UAAU;QACV,YAAY,UAAU,OAAO,CAAC,sBAC5B;QAEF,mBAAmB;QACnB,YAAY,UAAU,OAAO,CAAC,0BAC5B;QAEF,OAAO;IACT;IAEA,qBACE,6LAAC,6JAAA,CAAA,UAAK,CAAC,QAAQ;kBACZ,MAAM,GAAG,CAAC,CAAC,MAAM,sBAChB,6LAAC;gBAAiB,yBAAyB;oBAAE,QAAQ,SAAS;gBAAM;eAAzD;;;;;;;;;;AAInB;AAEA,mEAAmE;AACnE,SAAS,qBAAqB,IAAY,EAAE,QAAgB;IAC1D,OAAQ,SAAS,WAAW;QAC1B,KAAK;QACL,KAAK;YACH,OAAO,mBAAmB;QAC5B,KAAK;YACH,OAAO,iBAAiB;QAC1B,0CAA0C;QAC1C;YACE,oDAAoD;YACpD,OAAO,KAAK,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,sBACjC,6LAAC;8BAAkB;mBAAR;;;;;IAEjB;AACF;AAEe,SAAS,gBAAgB,EAAE,QAAQ,EAAwB;;IACxE,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EACjD,SAAS,SAAS,IAAI,OAAO,IAAI,CAAC,SAAS,SAAS,EAAE,MAAM,GAAG,IAC3D,OAAO,IAAI,CAAC,SAAS,SAAS,CAAC,CAAC,EAAE,GAClC;IAGN,6CAA6C;IAC7C,MAAM,qBAAqB,SAAS,UAAU,GAC3C,OAAO,IAAI,CAAC,SAAS,UAAU,EAAE,MAAM,CAAC,CAAA,OACvC,SAAS,UAAU,EAAE,CAAC,KAAyC,IAC9B,EAAE;IAEvC,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EACvD,mBAAmB,MAAM,GAAG,IAAI,kBAAkB,CAAC,EAAE,GAAG;IAG1D,MAAM,iBAAiB,CAAC;QACtB,OAAQ,OAAO,WAAW;YACxB,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT;gBACE,OAAO;QACX;IACF;IAEA,MAAM,iBAAiB,CAAC;QACtB,MAAM,aAAa,SAAS;QAC5B,IAAI,cAAc,OAAO,aAAa,KAAK;YACzC,OAAO;QACT,OAAO,IAAI,cAAc,KAAK;YAC5B,OAAO;QACT,OAAO;YACL,OAAO;QACT;IACF;IAEA,gCAAgC;IAChC,MAAM,qBAAqB,CAAC,MAAc;QACxC,qBACE,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAK,WAAU;8CAA0C,cAAc,CAAC,SAAqC;;;;;;8CAC9G,6LAAC;oCAAK,WAAU;8CAA+E;;;;;;;;;;;;sCAEjG,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAI,WAAU;;;;;;8CACf,6LAAC;oCAAI,WAAU;;;;;;8CACf,6LAAC;oCAAI,WAAU;;;;;;;;;;;;;;;;;;8BAGnB,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;;;;;;sCACf,6LAAC;sCAAK,qBAAqB,MAAM;;;;;;;;;;;;8BAEnC,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAK,WAAU;8CAAmB;;;;;;8CACnC,6LAAC;oCAAK,WAAU;8CAAmB;;;;;;;;;;;;sCAErC,6LAAC;4BAAI,WAAU;;8CACb,6LAAC;oCAAK,WAAU;8CAAqB;;;;;;8CACrC,6LAAC;oCAAK,WAAU;8CAAqB;;;;;;;;;;;;;;;;;;;;;;;;IAK/C;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAI,WAAU;;;;;;0BACf,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAW,GAAG,eAAe,SAAS,MAAM,EAAE,0DAA0D,CAAC;0CAC3G,SAAS,MAAM,CAAC,WAAW;;;;;;0CAE9B,6LAAC;gCAAG,WAAU;0CAA6C,SAAS,IAAI;;;;;;;;;;;;kCAG1E,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAI,WAAU;sCAA+B,SAAS,GAAG;;;;;;;;;;;kCAG5D,6LAAC;wBAAI,WAAU;kCACb,cAAA,6LAAC;4BAAE,WAAU;sCAA4B,SAAS,WAAW;;;;;;;;;;;oBAG9D,SAAS,OAAO,IAAI,OAAO,IAAI,CAAC,SAAS,OAAO,EAAE,MAAM,GAAG,mBAC1D,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;0CAAoD;;;;;;0CAClE,6LAAC;gCAAI,WAAU;0CACb,cAAA,6LAAC;oCAAM,WAAU;;sDACf,6LAAC;4CAAM,WAAU;sDACf,cAAA,6LAAC;gDAAG,WAAU;;kEACZ,6LAAC;wDAAG,WAAU;kEAA8D;;;;;;kEAC5E,6LAAC;wDAAG,WAAU;kEAA8D;;;;;;kEAC5E,6LAAC;wDAAG,WAAU;kEAA8D;;;;;;;;;;;;;;;;;sDAGhF,6LAAC;4CAAM,WAAU;sDACd,OAAO,OAAO,CAAC,SAAS,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,KAAK,MAAM;gDACjD,MAAM,cAAc;gDACpB,qBACE,6LAAC;oDAAa,WAAU;;sEACtB,6LAAC;4DAAG,WAAU;sEAAiD;;;;;;sEAC/D,6LAAC;4DAAG,WAAU;sEAAmD,OAAO,gBAAgB,WAAW,cAAc,YAAY,IAAI;;;;;;sEACjI,6LAAC;4DAAG,WAAU;sEAAyC,OAAO,gBAAgB,YAAY,YAAY,WAAW,GAAG,YAAY,WAAW,GAAG;;;;;;;mDAHvI;;;;;4CAMb;;;;;;;;;;;;;;;;;;;;;;;oBAOT,SAAS,WAAW,kBACnB,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAG,WAAU;0CAA+C;;;;;;0CAC7D,6LAAC;gCAAI,WAAU;0CACb,cAAA,6LAAC;oCAAM,WAAU;;sDACf,6LAAC;4CAAM,WAAU;sDACf,cAAA,6LAAC;;kEACC,6LAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAiF;;;;;;kEAG3G,6LAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAiF;;;;;;kEAG3G,6LAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAiF;;;;;;kEAG3G,6LAAC;wDAAG,OAAM;wDAAM,WAAU;kEAAiF;;;;;;;;;;;;;;;;;sDAK/G,6LAAC;4CAAM,WAAU;sDACd,OAAO,OAAO,CAAC,SAAS,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC,KAAK,MAAM;gDACrD,MAAM,eAAe;gDACrB,qBACE,6LAAC;oDAAa,WAAU;;sEACtB,6LAAC;4DAAG,WAAU;sEACX;;;;;;sEAEH,6LAAC;4DAAG,WAAU;sEACX,aAAa,IAAI;;;;;;sEAEpB,6LAAC;4DAAG,WAAU;sEACX,aAAa,QAAQ,GAAG,QAAQ;;;;;;sEAEnC,6LAAC;4DAAG,WAAU;sEACX,aAAa,WAAW;;;;;;;mDAXpB;;;;;4CAeb;;;;;;;;;;;;;;;;;;;;;;;oBAOT,SAAS,SAAS,IAAI,OAAO,IAAI,CAAC,SAAS,SAAS,EAAE,MAAM,GAAG,mBAC9D,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAG,WAAU;kDAA0C;;;;;;kDACxD,6LAAC;wCAAI,WAAU;kDACZ,OAAO,IAAI,CAAC,SAAS,SAAS,EAAE,GAAG,CAAC,CAAC,QAAQ;4CAC5C,MAAM,UAAU,UAAU;4CAC1B,MAAM,SAAS,UAAU,OAAO,IAAI,CAAC,SAAS,SAAS,EAAE,MAAM,GAAG;4CAClE,IAAI,eAAe;4CACnB,IAAI,SAAS,eAAe;4CAC5B,IAAI,QAAQ,gBAAgB;4CAE5B,qBACE,6LAAC;gDAEC,SAAS,IAAM,kBAAkB;gDACjC,WAAW,CAAC,0HAA0H,EACpI,mBAAmB,SACf,GAAG,eAAe,QAAQ,aAAa,CAAC,GACxC,4CACJ;0DAED;+CARI;;;;;wCAWX;;;;;;;;;;;;4BAIH,kBAAkB,SAAS,SAAS,CAAC,eAAe,kBACnD,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAE,WAAU;kDAAsB,SAAS,SAAS,CAAC,eAAe,CAAC,WAAW;;;;;;oCAChF,SAAS,SAAS,CAAC,eAAe,CAAC,OAAO,kBACzC,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAI,WAAU;;kEACb,6LAAC;wDAAI,WAAU;;0EACb,6LAAC;gEAAK,WAAU;0EAA6B;;;;;;0EAC7C,6LAAC;gEAAK,WAAU;0EAA4D;;;;;;;;;;;;kEAE9E,6LAAC;wDAAI,WAAU;;0EACb,6LAAC;gEAAI,WAAU;;;;;;0EACf,6LAAC;gEAAI,WAAU;;;;;;0EACf,6LAAC;gEAAI,WAAU;;;;;;;;;;;;;;;;;;0DAGnB,6LAAC;gDAAI,WAAU;;kEACb,6LAAC;wDAAI,WAAU;;;;;;kEACf,6LAAC;kEAAK,iBAAiB,KAAK,SAAS,CAAC,SAAS,SAAS,CAAC,eAAe,CAAC,OAAO,EAAE,MAAM;;;;;;;;;;;;0DAE1F,6LAAC;gDAAI,WAAU;;kEACb,6LAAC;wDAAI,WAAU;;0EACb,6LAAC;gEAAK,WAAU;0EAAmB;;;;;;0EACnC,6LAAC;gEAAK,WAAU;0EAAmB;;;;;;;;;;;;kEAErC,6LAAC;wDAAI,WAAU;;0EACb,6LAAC;gEAAK,WAAU;0EAAqB;;;;;;0EACrC,6LAAC;gEAAK,WAAU;0EAAqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAUpD,SAAS,UAAU,IAAI,OAAO,IAAI,CAAC,SAAS,UAAU,EAAE,MAAM,GAAG,mBAChE,6LAAC;wBAAI,WAAU;;0CACb,6LAAC;gCAAI,WAAU;;kDACb,6LAAC;wCAAG,WAAU;kDAA0C;;;;;;kDACxD,6LAAC;wCAAI,WAAU;kDACb,cAAA,6LAAC;4CACC,OAAO;4CACP,UAAU,CAAC,IAAM,qBAAqB,EAAE,MAAM,CAAC,KAAK;4CACpD,WAAU;4CACV,OAAO;gDACL,iBAAiB;gDACjB,oBAAoB;gDACpB,kBAAkB;gDAClB,gBAAgB;4CAClB;sDAEC,mBAAmB,GAAG,CAAC,CAAA,qBACtB,6LAAC;oDAAkB,OAAO;oDAAM,WAAU;8DACvC,cAAc,CAAC,KAAK;mDADV;;;;;;;;;;;;;;;;;;;;;4BAQpB,SAAS,UAAU,IAAI,SAAS,UAAU,CAAC,kBAAkB,IAC5D,mBAAmB,SAAS,UAAU,CAAC,kBAAkB,EAAE;;;;;;;;;;;;;;;;;;;AAOzE;GA9QwB;KAAA","debugId":null}}]
}