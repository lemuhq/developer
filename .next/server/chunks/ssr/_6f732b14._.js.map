{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"sources":["file:///Users/mac/Documents/workstation/2025/lemu-project/developer/src/app/api/apiData.ts"],"sourcesContent":["export interface Endpoint {\n  id: string;\n  name: string;\n  description: string;\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE';\n  url: string;\n  headers?: Record<string, string>;\n  requestBody?: Record<string, unknown>;\n  parameters?: Record<string, {\n    type: string;\n    description: string;\n    required: boolean;\n  }>;\n  responses: {\n    [statusCode: string]: {\n      description: string;\n      example: Record<string, unknown>;\n    };\n  };\n  sampleCode?: {\n    curl?: string;\n    javascript?: string;\n    python?: string;\n    ruby?: string;\n    go?: string;\n    java?: string;\n    csharp?: string;\n    php?: string;\n    nodejs?: string;\n    kotlin?: string;\n    swift?: string;\n    rust?: string;\n    dart?: string;\n    elixir?: string;\n    powershell?: string;\n    bash?: string;\n    perl?: string;\n    r?: string;\n    scala?: string;\n    haskell?: string;\n    clojure?: string;\n    typescript?: string;\n    groovy?: string;\n    lua?: string;\n  };\n}\n\nexport interface ApiCategory {\n  id: string;\n  name: string;\n  description: string;\n  endpoints: Endpoint[];\n}\n\nexport const API_DATA: ApiCategory[] = [\n  {\n    id: 'banks',\n    name: 'Banks',\n    description: 'Endpoints for managing bank operations',\n    endpoints: [\n      {\n        id: 'get-banks',\n        name: 'Get Bank List',\n        description: 'Retrieve a list of supported banks',\n        method: 'GET',\n        url: '/api/v1/banks',\n        responses: {\n          '200': {\n            description: 'List of banks retrieved successfully',\n            example: {\n              status: 'success',\n              data: {\n                banks: [\n                  {\n                    id: 'bank_123',\n                    name: 'First Bank',\n                    code: '011',\n                    country: 'NG',\n                    currency: 'NGN'\n                  },\n                  {\n                    id: 'bank_456',\n                    name: 'Access Bank',\n                    code: '044',\n                    country: 'NG',\n                    currency: 'NGN'\n                  }\n                ]\n              }\n            }\n          },\n          '401': {\n            description: 'Unauthorized. Authentication failed',\n            example: {\n              status: 'error',\n              message: 'Authentication failed. Invalid API key'\n            }\n          }\n        },\n        sampleCode: {\n          curl: \"curl -X GET \\\\\\n  https://api.lemu.co/api/v1/banks \\\\\\n  -H 'Authorization: Bearer YOUR_API_KEY'\",\n          javascript: \"fetch('https://api.lemu.co/api/v1/banks', {\\n  method: 'GET',\\n  headers: {\\n    'Authorization': 'Bearer YOUR_API_KEY'\\n  }\\n})\\n.then(response => response.json())\\n.then(data => console.log(data))\\n.catch(error => console.error('Error:', error));\",\n          python: \"import requests\\n\\nheaders = {\\n    'Authorization': 'Bearer YOUR_API_KEY'\\n}\\n\\nresponse = requests.get('https://api.lemu.co/api/v1/banks', headers=headers)\\n\\nprint(response.json())\",\n          ruby: \"require 'net/http'\\nrequire 'uri'\\nrequire 'json'\\n\\nuri = URI.parse('https://api.lemu.co/api/v1/banks')\\nrequest = Net::HTTP::Get.new(uri)\\nrequest['Authorization'] = 'Bearer YOUR_API_KEY'\\n\\nresponse = Net::HTTP.start(uri.hostname, uri.port, use_ssl: uri.scheme == 'https') do |http|\\n  http.request(request)\\nend\\n\\nputs JSON.parse(response.body)\",\n          php: \"<?php\\n$curl = curl_init();\\n\\ncurl_setopt_array($curl, [\\n  CURLOPT_URL => \\\"https://api.lemu.co/api/v1/banks\\\",\\n  CURLOPT_RETURNTRANSFER => true,\\n  CURLOPT_HTTPHEADER => [\\n    \\\"Authorization: Bearer YOUR_API_KEY\\\"\\n  ],\\n]);\\n\\n$response = curl_exec($curl);\\ncurl_close($curl);\\n\\necho $response;\\n?>\",\n          go: \"package main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\t\\\"io/ioutil\\\"\\n\\t\\\"net/http\\\"\\n)\\n\\nfunc main() {\\n\\tclient := &http.Client{}\\n\\treq, _ := http.NewRequest(\\\"GET\\\", \\\"https://api.lemu.co/api/v1/banks\\\", nil)\\n\\treq.Header.Add(\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\")\\n\\n\\tresp, err := client.Do(req)\\n\\tif err != nil {\\n\\t\\tfmt.Println(\\\"Error:\\\", err)\\n\\t\\treturn\\n\\t}\\n\\tdefer resp.Body.Close()\\n\\n\\tbody, _ := ioutil.ReadAll(resp.Body)\\n\\tfmt.Println(string(body))\\n}\",\n          java: \"import java.net.HttpURLConnection;\\nimport java.net.URL;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class GetBanks {\\n    public static void main(String[] args) {\\n        try {\\n            URL url = new URL(\\\"https://api.lemu.co/api/v1/banks\\\");\\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\\n            conn.setRequestMethod(\\\"GET\\\");\\n            conn.setRequestProperty(\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\");\\n\\n            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\\n            String inputLine;\\n            StringBuffer response = new StringBuffer();\\n            while ((inputLine = in.readLine()) != null) {\\n                response.append(inputLine);\\n            }\\n            in.close();\\n\\n            System.out.println(response.toString());\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}\",\n          csharp: \"using System;\\nusing System.Net.Http;\\nusing System.Threading.Tasks;\\n\\nnamespace LemuApiExample\\n{\\n    class Program\\n    {\\n        static async Task Main(string[] args)\\n        {\\n            using (HttpClient client = new HttpClient())\\n            {\\n                client.DefaultRequestHeaders.Add(\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\");\\n                \\n                HttpResponseMessage response = await client.GetAsync(\\\"https://api.lemu.co/api/v1/banks\\\");\\n                string responseBody = await response.Content.ReadAsStringAsync();\\n                \\n                Console.WriteLine(responseBody);\\n            }\\n        }\\n    }\\n}\",\n          nodejs: \"const axios = require('axios');\\n\\nasync function getBanks() {\\n  try {\\n    const response = await axios({\\n      method: 'get',\\n      url: 'https://api.lemu.co/api/v1/banks',\\n      headers: {\\n        'Authorization': 'Bearer YOUR_API_KEY'\\n      }\\n    });\\n    \\n    return response.data;\\n  } catch (error) {\\n    console.error('Error:', error.response?.data || error.message);\\n  }\\n}\",\n          kotlin: \"import java.net.HttpURLConnection\\nimport java.net.URL\\nimport java.io.BufferedReader\\nimport java.io.InputStreamReader\\n\\nfun main() {\\n    val url = URL(\\\"https://api.lemu.co/api/v1/banks\\\")\\n    val connection = url.openConnection() as HttpURLConnection\\n    connection.requestMethod = \\\"GET\\\"\\n    connection.setRequestProperty(\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\")\\n\\n    val responseCode = connection.responseCode\\n    if (responseCode == HttpURLConnection.HTTP_OK) {\\n        val response = BufferedReader(InputStreamReader(connection.inputStream)).use { it.readText() }\\n        println(response)\\n    } else {\\n        println(\\\"Error: $responseCode\\\")\\n    }\\n}\",\n          swift: \"import Foundation\\n\\nlet url = URL(string: \\\"https://api.lemu.co/api/v1/banks\\\")!\\nvar request = URLRequest(url: url)\\nrequest.httpMethod = \\\"GET\\\"\\nrequest.addValue(\\\"Bearer YOUR_API_KEY\\\", forHTTPHeaderField: \\\"Authorization\\\")\\n\\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in\\n    guard let data = data, error == nil else {\\n        print(\\\"Error: \\\\(error?.localizedDescription ?? \\\"Unknown error\\\")\\\")\\n        return\\n    }\\n    \\n    if let responseString = String(data: data, encoding: .utf8) {\\n        print(responseString)\\n    }\\n}\\n\\ntask.resume()\",\n          rust: \"use reqwest::header::{HeaderMap, HeaderValue, AUTHORIZATION};\\n\\n#[tokio::main]\\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\\n    let mut headers = HeaderMap::new();\\n    headers.insert(AUTHORIZATION, HeaderValue::from_static(\\\"Bearer YOUR_API_KEY\\\"));\\n\\n    let client = reqwest::Client::new();\\n    let res = client.get(\\\"https://api.lemu.co/api/v1/banks\\\")\\n        .headers(headers)\\n        .send()\\n        .await?\\n        .text()\\n        .await?;\\n\\n    println!(\\\"{}\\\", res);\\n    Ok(())\\n}\",\n          typescript: \"import axios from 'axios';\\n\\nasync function getBanks(): Promise<any> {\\n  try {\\n    const response = await axios({\\n      method: 'get',\\n      url: 'https://api.lemu.co/api/v1/banks',\\n      headers: {\\n        'Authorization': 'Bearer YOUR_API_KEY'\\n      }\\n    });\\n    \\n    return response.data;\\n  } catch (error) {\\n    console.error('Error:', error);\\n    throw error;\\n  }\\n}\",\n          bash: \"#!/bin/bash\\n\\ncurl -X GET \\\\\\n  https://api.lemu.co/api/v1/banks \\\\\\n  -H 'Authorization: Bearer YOUR_API_KEY'\",\n          powershell: \"$headers = @{\\n    \\\"Authorization\\\" = \\\"Bearer YOUR_API_KEY\\\"\\n}\\n\\n$response = Invoke-RestMethod -Uri \\\"https://api.lemu.co/api/v1/banks\\\" -Method GET -Headers $headers\\n$response | ConvertTo-Json\",\n          dart: \"import 'package:http/http.dart' as http;\\nimport 'dart:convert';\\n\\nFuture<void> getBanks() async {\\n  final url = Uri.parse('https://api.lemu.co/api/v1/banks');\\n  final response = await http.get(\\n    url,\\n    headers: {\\n      'Authorization': 'Bearer YOUR_API_KEY',\\n    },\\n  );\\n\\n  if (response.statusCode == 200) {\\n    final data = jsonDecode(response.body);\\n    print(data);\\n  } else {\\n    print('Error: ${response.statusCode}');\\n  }\\n}\",\n          elixir: \"defmodule BankClient do\\n  def get_banks do\\n    url = \\\"https://api.lemu.co/api/v1/banks\\\"\\n    headers = [\\n      {\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\"}\\n    ]\\n    \\n    case HTTPoison.get(url, headers) do\\n      {:ok, %HTTPoison.Response{status_code: 200, body: body}} ->\\n        Jason.decode!(body)\\n      {:error, error} ->\\n        IO.inspect(error)\\n    end\\n  end\\nend\",\n          perl: \"use strict;\\nuse warnings;\\nuse LWP::UserAgent;\\nuse JSON;\\n\\nmy $ua = LWP::UserAgent->new;\\n\\nmy $req = HTTP::Request->new(GET => 'https://api.lemu.co/api/v1/banks');\\n$req->header('Authorization' => 'Bearer YOUR_API_KEY');\\n\\nmy $resp = $ua->request($req);\\n\\nif ($resp->is_success) {\\n    my $decoded_json = decode_json($resp->decoded_content);\\n    print \\\"Response data: \\\";\\n    use Data::Dumper;\\n    print Dumper($decoded_json);\\n} else {\\n    print \\\"HTTP GET error code: \\\", $resp->code, \\\"\\\\n\\\";\\n    print \\\"HTTP GET error message: \\\", $resp->message, \\\"\\\\n\\\";\\n}\",\n          r: \"library(httr)\\nlibrary(jsonlite)\\n\\nheaders <- add_headers(Authorization = \\\"Bearer YOUR_API_KEY\\\")\\n\\nresponse <- GET(\\\"https://api.lemu.co/api/v1/banks\\\", headers)\\n\\nif (status_code(response) == 200) {\\n  data <- fromJSON(content(response, \\\"text\\\", encoding = \\\"UTF-8\\\"))\\n  print(data)\\n} else {\\n  print(paste(\\\"Error:\\\", status_code(response)))\\n}\",\n          scala: \"import scalaj.http._\\nimport scala.util.parsing.json._\\n\\nobject GetBanks {\\n  def main(args: Array[String]): Unit = {\\n    val response = Http(\\\"https://api.lemu.co/api/v1/banks\\\")\\n      .header(\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\")\\n      .asString\\n      \\n    println(response.body)\\n  }\\n}\",\n          haskell: \"module Main where\\n\\nimport Network.HTTP.Simple\\nimport qualified Data.ByteString.Lazy.Char8 as L8\\n\\nmain :: IO ()\\nmain = do\\n    let request = setRequestMethod \\\"GET\\\"\\n                $ setRequestHeader \\\"Authorization\\\" [\\\"Bearer YOUR_API_KEY\\\"]\\n                $ setRequestSecure True\\n                $ setRequestHost \\\"api.lemu.co\\\"\\n                $ setRequestPath \\\"/api/v1/banks\\\"\\n                $ defaultRequest\\n    \\n    response <- httpLBS request\\n    putStrLn $ \\\"Status code: \\\" ++ show (getResponseStatusCode response)\\n    L8.putStrLn $ getResponseBody response\",\n          clojure: \"(ns lemu.api\\n  (:require [clj-http.client :as client]\\n            [cheshire.core :refer :all]))\\n\\n(defn get-banks []\\n  (let [response (client/get \\\"https://api.lemu.co/api/v1/banks\\\"\\n                            {:headers {\\\"Authorization\\\" \\\"Bearer YOUR_API_KEY\\\"}\\n                             :as :json})]\\n    (println (parse-string (:body response) true))))\",\n          groovy: \"import groovy.json.JsonSlurper\\n\\ndef connection = new URL(\\\"https://api.lemu.co/api/v1/banks\\\").openConnection()\\nconnection.setRequestMethod(\\\"GET\\\")\\nconnection.setRequestProperty(\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\")\\n\\ndef responseCode = connection.responseCode\\n\\nif (responseCode == 200) {\\n    def responseBody = connection.inputStream.text\\n    def jsonSlurper = new JsonSlurper()\\n    def data = jsonSlurper.parseText(responseBody)\\n    println data\\n} else {\\n    println \\\"Error: ${responseCode}\\\"\\n}\",\n          lua: \"local http = require \\\"socket.http\\\"\\nlocal ltn12 = require \\\"ltn12\\\"\\nlocal json = require \\\"cjson\\\"\\n\\nlocal response_body = {}\\nlocal headers = {\\n  Authorization = \\\"Bearer YOUR_API_KEY\\\"\\n}\\n\\nlocal res, code, response_headers = http.request {\\n  url = \\\"https://api.lemu.co/api/v1/banks\\\",\\n  method = \\\"GET\\\",\\n  headers = headers,\\n  sink = ltn12.sink.table(response_body)\\n}\\n\\nif code == 200 then\\n  local response_text = table.concat(response_body)\\n  local data = json.decode(response_text)\\n  print(\\\"Response data: \\\")\\n  for k, v in pairs(data) do\\n    print(k, v)\\n  end\\nelse\\n  print(\\\"Error: \\\" .. code)\\nend\"\n        }\n      },\n      {\n        id: 'verify-bank-account',\n        name: 'Verify Bank Account',\n        description: 'Verify a bank account by providing account details',\n        method: 'POST',\n        url: '/api/v1/banks/verify',\n        headers: {\n          'Authorization': 'Bearer YOUR_API_KEY',\n          'Content-Type': 'application/json'\n        },\n        requestBody: {\n          account_number: '0123456789',\n          bank_code: '011'\n        },\n        responses: {\n          '200': {\n            description: 'Bank account verified successfully',\n            example: {\n              status: 'success',\n              data: {\n                account_number: '0123456789',\n                account_name: 'John Doe',\n                bank_code: '011',\n                bank_name: 'First Bank'\n              }\n            }\n          },\n          '400': {\n            description: 'Bad request: Invalid account details',\n            example: {\n              status: 'error',\n              code: 'invalid_account',\n              message: 'Could not resolve account details'\n            }\n          },\n          '401': {\n            description: 'Unauthorized: Invalid or missing API key',\n            example: {\n              status: 'error',\n              code: 'unauthorized',\n              message: 'Invalid API key provided'\n            }\n          }\n        },\n        sampleCode: {\n          curl: \"curl -X POST 'https://api.lemu.africa/v1/banks/verify' \\\\\\n  -H 'Authorization: Bearer YOUR_API_KEY' \\\\\\n  -H 'Content-Type: application/json' \\\\\\n  -d '{\\\"account_number\\\":\\\"0123456789\\\",\\\"bank_code\\\":\\\"011\\\"}'\",\n          javascript: \"// Using browser Fetch API\\nconst verifyAccount = async () => {\\n  try {\\n    const response = await fetch('https://api.lemu.africa/v1/banks/verify', {\\n      method: 'POST',\\n      headers: {\\n        'Authorization': 'Bearer YOUR_API_KEY',\\n        'Content-Type': 'application/json'\\n      },\\n      body: JSON.stringify({\\n        account_number: '0123456789',\\n        bank_code: '011'\\n      })\\n    });\\n    const data = await response.json();\\n    return data;\\n  } catch (error) {\\n    console.error('Error verifying account:', error);\\n  }\\n};\",\n          nodejs: \"// Using Node.js with axios\\nconst axios = require('axios');\\n\\nasync function verifyAccount() {\\n  try {\\n    const response = await axios({\\n      method: 'post',\\n      url: 'https://api.lemu.africa/v1/banks/verify',\\n      headers: {\\n        'Authorization': 'Bearer YOUR_API_KEY',\\n        'Content-Type': 'application/json'\\n      },\\n      data: {\\n        account_number: '0123456789',\\n        bank_code: '011'\\n      }\\n    });\\n    \\n    return response.data;\\n  } catch (error) {\\n    console.error('Error verifying account:', error.response?.data || error.message);\\n  }\\n}\",\n          python: \"import requests\\nimport json\\n\\nheaders = {\\n    'Authorization': 'Bearer YOUR_API_KEY',\\n    'Content-Type': 'application/json'\\n}\\n\\npayload = {\\n    'account_number': '0123456789',\\n    'bank_code': '011'\\n}\\n\\nresponse = requests.post('https://api.lemu.africa/v1/banks/verify', headers=headers, data=json.dumps(payload))\\ndata = response.json()\\nprint(data)\",\n          ruby: \"require 'net/http'\\nrequire 'uri'\\nrequire 'json'\\n\\nuri = URI.parse('https://api.lemu.africa/v1/banks/verify')\\nrequest = Net::HTTP::Post.new(uri)\\nrequest['Authorization'] = 'Bearer YOUR_API_KEY'\\nrequest['Content-Type'] = 'application/json'\\nrequest.body = JSON.dump({\\n  'account_number' => '0123456789',\\n  'bank_code' => '011'\\n})\\n\\nresponse = Net::HTTP.start(uri.hostname, uri.port, use_ssl: uri.scheme == 'https') do |http|\\n  http.request(request)\\nend\\n\\nputs JSON.parse(response.body)\",\n          php: \"<?php\\n$curl = curl_init();\\n\\n$payload = json_encode([\\n  'account_number' => '0123456789',\\n  'bank_code' => '011'\\n]);\\n\\ncurl_setopt_array($curl, [\\n  CURLOPT_URL => \\\"https://api.lemu.africa/v1/banks/verify\\\",\\n  CURLOPT_RETURNTRANSFER => true,\\n  CURLOPT_POST => true,\\n  CURLOPT_POSTFIELDS => $payload,\\n  CURLOPT_HTTPHEADER => [\\n    \\\"Authorization: Bearer YOUR_API_KEY\\\",\\n    \\\"Content-Type: application/json\\\",\\n    \\\"Content-Length: \\\" . strlen($payload)\\n  ],\\n]);\\n\\n$response = curl_exec($curl);\\ncurl_close($curl);\\n\\necho $response;\\n?>\",\n          go: \"package main\\n\\nimport (\\n\\t\\\"bytes\\\"\\n\\t\\\"encoding/json\\\"\\n\\t\\\"fmt\\\"\\n\\t\\\"io/ioutil\\\"\\n\\t\\\"net/http\\\"\\n)\\n\\nfunc main() {\\n\\tpayload, _ := json.Marshal(map[string]string{\\n\\t\\t\\\"account_number\\\": \\\"0123456789\\\",\\n\\t\\t\\\"bank_code\\\":     \\\"011\\\",\\n\\t})\\n\\n\\tclient := &http.Client{}\\n\\treq, _ := http.NewRequest(\\\"POST\\\", \\\"https://api.lemu.africa/v1/banks/verify\\\", bytes.NewBuffer(payload))\\n\\treq.Header.Add(\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\")\\n\\treq.Header.Add(\\\"Content-Type\\\", \\\"application/json\\\")\\n\\n\\tresp, err := client.Do(req)\\n\\tif err != nil {\\n\\t\\tfmt.Println(\\\"Error:\\\", err)\\n\\t\\treturn\\n\\t}\\n\\tdefer resp.Body.Close()\\n\\n\\tbody, _ := ioutil.ReadAll(resp.Body)\\n\\tfmt.Println(string(body))\\n}\",\n          java: \"import java.io.OutputStream;\\nimport java.net.HttpURLConnection;\\nimport java.net.URL;\\nimport java.nio.charset.StandardCharsets;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class VerifyBankAccount {\\n    public static void main(String[] args) {\\n        try {\\n            URL url = new URL(\\\"https://api.lemu.africa/v1/banks/verify\\\");\\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\\n            conn.setRequestMethod(\\\"POST\\\");\\n            conn.setRequestProperty(\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\");\\n            conn.setRequestProperty(\\\"Content-Type\\\", \\\"application/json\\\");\\n            conn.setDoOutput(true);\\n\\n            String jsonInputString = \\\"{\\\\\\\"account_number\\\\\\\":\\\\\\\"0123456789\\\\\\\",\\\\\\\"bank_code\\\\\\\":\\\\\\\"011\\\\\\\"}\\\";\\n            \\n            try(OutputStream os = conn.getOutputStream()) {\\n                byte[] input = jsonInputString.getBytes(StandardCharsets.UTF_8);\\n                os.write(input, 0, input.length);\\n            }\\n\\n            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\\n            String inputLine;\\n            StringBuilder response = new StringBuilder();\\n            while ((inputLine = in.readLine()) != null) {\\n                response.append(inputLine);\\n            }\\n            in.close();\\n\\n            System.out.println(response.toString());\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}\",\n          csharp: \"using System;\\nusing System.Net.Http;\\nusing System.Text;\\nusing System.Threading.Tasks;\\nusing System.Text.Json;\\n\\nnamespace LemuApiExample\\n{\\n    class Program\\n    {\\n        static async Task Main(string[] args)\\n        {\\n            using (HttpClient client = new HttpClient())\\n            {\\n                client.DefaultRequestHeaders.Add(\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\");\\n                \\n                var requestData = new {\\n                    account_number = \\\"0123456789\\\",\\n                    bank_code = \\\"011\\\"\\n                };\\n                \\n                var content = new StringContent(\\n                    JsonSerializer.Serialize(requestData),\\n                    Encoding.UTF8,\\n                    \\\"application/json\\\");\\n                \\n                HttpResponseMessage response = await client.PostAsync(\\n                    \\\"https://api.lemu.africa/v1/banks/verify\\\", \\n                    content);\\n                \\n                string responseBody = await response.Content.ReadAsStringAsync();\\n                Console.WriteLine(responseBody);\\n            }\\n        }\\n    }\\n}\"\n        }\n      }\n    ]\n  },\n  {\n    id: 'transactions',\n    name: 'Transactions',\n    description: 'Initiate and manage financial transactions',\n    endpoints: [\n      {\n        id: 'initiate-transfer',\n        name: 'Initiate Transfer',\n        description: 'Initiate a transfer from your wallet to a bank account',\n        method: 'POST',\n        url: '/api/v1/transactions/transfer',\n        headers: {\n          'Authorization': 'Bearer YOUR_API_KEY',\n          'Content-Type': 'application/json'\n        },\n        requestBody: {\n          amount: 5000,\n          account_number: '0123456789',\n          bank_code: '011',\n          description: 'Payment for services',\n          reference: 'TR_123456789'\n        },\n        responses: {\n          '200': {\n            description: 'Transfer initiated successfully',\n            example: {\n              status: 'success',\n              data: {\n                id: 'txn_123abc',\n                amount: 5000,\n                recipient: {\n                  account_number: '0123456789',\n                  bank_code: '011',\n                  account_name: 'John Doe'\n                },\n                description: 'Payment for services',\n                reference: 'TR_123456789',\n                status: 'pending',\n                created_at: '2023-01-01T12:00:00Z'\n              }\n            }\n          },\n          '400': {\n            description: 'Bad request: Invalid transfer details',\n            example: {\n              status: 'error',\n              code: 'invalid_transfer',\n              message: 'Invalid transfer details provided'\n            }\n          },\n          '401': {\n            description: 'Unauthorized: Invalid or missing API key',\n            example: {\n              status: 'error',\n              code: 'unauthorized',\n              message: 'Invalid API key provided'\n            }\n          },\n          '422': {\n            description: 'Insufficient funds in wallet',\n            example: {\n              status: 'error',\n              code: 'insufficient_funds',\n              message: 'Insufficient funds in wallet'\n            }\n          }\n        },\n        sampleCode: {\n          curl: \"curl -X POST 'https://api.lemu.africa/v1/transactions/transfer' \\\\\\n  -H 'Authorization: Bearer YOUR_API_KEY' \\\\\\n  -H 'Content-Type: application/json' \\\\\\n  -d '{\\n    \\\"amount\\\": 5000,\\n    \\\"account_number\\\": \\\"0123456789\\\",\\n    \\\"bank_code\\\": \\\"011\\\",\\n    \\\"description\\\": \\\"Payment for services\\\",\\n    \\\"reference\\\": \\\"TR_123456789\\\"\\n  }'\",\n          javascript: \"// Using browser Fetch API\\nconst initiateTransfer = async () => {\\n  try {\\n    const response = await fetch('https://api.lemu.africa/v1/transactions/transfer', {\\n      method: 'POST',\\n      headers: {\\n        'Authorization': 'Bearer YOUR_API_KEY',\\n        'Content-Type': 'application/json'\\n      },\\n      body: JSON.stringify({\\n        amount: 5000,\\n        account_number: '0123456789',\\n        bank_code: '011',\\n        description: 'Payment for services',\\n        reference: 'TR_123456789'\\n      })\\n    });\\n    const data = await response.json();\\n    return data;\\n  } catch (error) {\\n    console.error('Error initiating transfer:', error);\\n  }\\n};\",\n          nodejs: \"// Using Node.js with axios\\nconst axios = require('axios');\\n\\nasync function initiateTransfer() {\\n  try {\\n    const response = await axios({\\n      method: 'post',\\n      url: 'https://api.lemu.africa/v1/transactions/transfer',\\n      headers: {\\n        'Authorization': 'Bearer YOUR_API_KEY',\\n        'Content-Type': 'application/json'\\n      },\\n      data: {\\n        amount: 5000,\\n        account_number: '0123456789',\\n        bank_code: '011',\\n        description: 'Payment for services',\\n        reference: 'TR_123456789'\\n      }\\n    });\\n    \\n    return response.data;\\n  } catch (error) {\\n    console.error('Error initiating transfer:', error.response?.data || error.message);\\n  }\\n}\",\n          python: \"import requests\\nimport json\\n\\nheaders = {\\n    'Authorization': 'Bearer YOUR_API_KEY',\\n    'Content-Type': 'application/json'\\n}\\n\\npayload = {\\n    'amount': 5000,\\n    'account_number': '0123456789',\\n    'bank_code': '011',\\n    'description': 'Payment for services',\\n    'reference': 'TR_123456789'\\n}\\n\\nresponse = requests.post('https://api.lemu.africa/v1/transactions/transfer', headers=headers, data=json.dumps(payload))\\ndata = response.json()\\nprint(data)\",\n          ruby: \"require 'net/http'\\nrequire 'uri'\\nrequire 'json'\\n\\nuri = URI.parse('https://api.lemu.africa/v1/transactions/transfer')\\nrequest = Net::HTTP::Post.new(uri)\\nrequest['Authorization'] = 'Bearer YOUR_API_KEY'\\nrequest['Content-Type'] = 'application/json'\\nrequest.body = JSON.dump({\\n  'amount' => 5000,\\n  'account_number' => '0123456789',\\n  'bank_code' => '011',\\n  'description' => 'Payment for services',\\n  'reference' => 'TR_123456789'\\n})\\n\\nresponse = Net::HTTP.start(uri.hostname, uri.port, use_ssl: uri.scheme == 'https') do |http|\\n  http.request(request)\\nend\\n\\nputs JSON.parse(response.body)\",\n          php: \"<?php\\n$curl = curl_init();\\n\\n$payload = json_encode([\\n  'amount' => 5000,\\n  'account_number' => '0123456789',\\n  'bank_code' => '011',\\n  'description' => 'Payment for services',\\n  'reference' => 'TR_123456789'\\n]);\\n\\ncurl_setopt_array($curl, [\\n  CURLOPT_URL => \\\"https://api.lemu.africa/v1/transactions/transfer\\\",\\n  CURLOPT_RETURNTRANSFER => true,\\n  CURLOPT_POST => true,\\n  CURLOPT_POSTFIELDS => $payload,\\n  CURLOPT_HTTPHEADER => [\\n    \\\"Authorization: Bearer YOUR_API_KEY\\\",\\n    \\\"Content-Type: application/json\\\",\\n    \\\"Content-Length: \\\" . strlen($payload)\\n  ],\\n]);\\n\\n$response = curl_exec($curl);\\ncurl_close($curl);\\n\\necho $response;\\n?>\",\n          go: \"package main\\n\\nimport (\\n\\t\\\"bytes\\\"\\n\\t\\\"encoding/json\\\"\\n\\t\\\"fmt\\\"\\n\\t\\\"io/ioutil\\\"\\n\\t\\\"net/http\\\"\\n)\\n\\nfunc main() {\\n\\tpayload, _ := json.Marshal(map[string]interface{}{\\n\\t\\t\\\"amount\\\": 5000,\\n\\t\\t\\\"account_number\\\": \\\"0123456789\\\",\\n\\t\\t\\\"bank_code\\\": \\\"011\\\",\\n\\t\\t\\\"description\\\": \\\"Payment for services\\\",\\n\\t\\t\\\"reference\\\": \\\"TR_123456789\\\",\\n\\t})\\n\\n\\tclient := &http.Client{}\\n\\treq, _ := http.NewRequest(\\\"POST\\\", \\\"https://api.lemu.africa/v1/transactions/transfer\\\", bytes.NewBuffer(payload))\\n\\treq.Header.Add(\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\")\\n\\treq.Header.Add(\\\"Content-Type\\\", \\\"application/json\\\")\\n\\n\\tresp, err := client.Do(req)\\n\\tif err != nil {\\n\\t\\tfmt.Println(\\\"Error:\\\", err)\\n\\t\\treturn\\n\\t}\\n\\tdefer resp.Body.Close()\\n\\n\\tbody, _ := ioutil.ReadAll(resp.Body)\\n\\tfmt.Println(string(body))\\n}\",\n          java: \"import java.io.OutputStream;\\nimport java.net.HttpURLConnection;\\nimport java.net.URL;\\nimport java.nio.charset.StandardCharsets;\\nimport java.io.BufferedReader;\\nimport java.io.InputStreamReader;\\n\\npublic class InitiateTransfer {\\n    public static void main(String[] args) {\\n        try {\\n            URL url = new URL(\\\"https://api.lemu.africa/v1/transactions/transfer\\\");\\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\\n            conn.setRequestMethod(\\\"POST\\\");\\n            conn.setRequestProperty(\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\");\\n            conn.setRequestProperty(\\\"Content-Type\\\", \\\"application/json\\\");\\n            conn.setDoOutput(true);\\n\\n            String jsonInputString = \\\"{\\\\\\\"amount\\\\\\\":5000,\\\\\\\"account_number\\\\\\\":\\\\\\\"0123456789\\\\\\\",\\\\\\\"bank_code\\\\\\\":\\\\\\\"011\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"Payment for services\\\\\\\",\\\\\\\"reference\\\\\\\":\\\\\\\"TR_123456789\\\\\\\"}\\\";\\n            \\n            try(OutputStream os = conn.getOutputStream()) {\\n                byte[] input = jsonInputString.getBytes(StandardCharsets.UTF_8);\\n                os.write(input, 0, input.length);\\n            }\\n\\n            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\\n            String inputLine;\\n            StringBuilder response = new StringBuilder();\\n            while ((inputLine = in.readLine()) != null) {\\n                response.append(inputLine);\\n            }\\n            in.close();\\n\\n            System.out.println(response.toString());\\n        } catch (Exception e) {\\n            e.printStackTrace();\\n        }\\n    }\\n}\",\n          csharp: \"using System;\\nusing System.Net.Http;\\nusing System.Text;\\nusing System.Threading.Tasks;\\nusing System.Text.Json;\\n\\nnamespace LemuApiExample\\n{\\n    class Program\\n    {\\n        static async Task Main(string[] args)\\n        {\\n            using (HttpClient client = new HttpClient())\\n            {\\n                client.DefaultRequestHeaders.Add(\\\"Authorization\\\", \\\"Bearer YOUR_API_KEY\\\");\\n                \\n                var requestData = new {\\n                    amount = 5000,\\n                    account_number = \\\"0123456789\\\",\\n                    bank_code = \\\"011\\\",\\n                    description = \\\"Payment for services\\\",\\n                    reference = \\\"TR_123456789\\\"\\n                };\\n                \\n                var content = new StringContent(\\n                    JsonSerializer.Serialize(requestData),\\n                    Encoding.UTF8,\\n                    \\\"application/json\\\");\\n                \\n                HttpResponseMessage response = await client.PostAsync(\\n                    \\\"https://api.lemu.africa/v1/transactions/transfer\\\", \\n                    content);\\n                \\n                string responseBody = await response.Content.ReadAsStringAsync();\\n                Console.WriteLine(responseBody);\\n            }\\n        }\\n    }\\n}\"\n        }\n      },\n      {\n        id: 'get-transaction',\n        name: 'Get Transaction',\n        description: 'Retrieve details of a specific transaction',\n        method: 'GET',\n        url: '/api/v1/transactions/{id}',\n        headers: {\n          'Authorization': 'Bearer YOUR_API_KEY',\n          'Content-Type': 'application/json'\n        },\n        parameters: {\n          id: {\n            type: 'string',\n            description: 'Unique identifier for the transaction',\n            required: true\n          }\n        },\n        responses: {\n          '200': {\n            description: 'Transaction details retrieved successfully',\n            example: {\n              status: 'success',\n              data: {\n                id: 'txn_123abc',\n                amount: 5000,\n                recipient: {\n                  account_number: '0123456789',\n                  bank_code: '011',\n                  account_name: 'John Doe'\n                },\n                description: 'Payment for services',\n                reference: 'TR_123456789',\n                status: 'success',\n                created_at: '2023-01-01T12:00:00Z',\n                updated_at: '2023-01-01T12:05:00Z'\n              }\n            }\n          },\n          '404': {\n            description: 'Transaction not found',\n            example: {\n              status: 'error',\n              code: 'not_found',\n              message: 'Transaction not found'\n            }\n          },\n          '401': {\n            description: 'Unauthorized: Invalid or missing API key',\n            example: {\n              status: 'error',\n              code: 'unauthorized',\n              message: 'Invalid API key provided'\n            }\n          }\n        },\n        sampleCode: {\n          curl: \"curl -X GET 'https://api.lemu.africa/v1/transactions/txn_123abc' \\\\\\n  -H 'Authorization: Bearer YOUR_API_KEY'\",\n          javascript: \"const getTransaction = async (transactionId) => {\\n  try {\\n    const response = await fetch(`https://api.lemu.africa/v1/transactions/${transactionId}`, {\\n      method: 'GET',\\n      headers: {\\n        'Authorization': 'Bearer YOUR_API_KEY',\\n        'Content-Type': 'application/json'\\n      }\\n    });\\n    const data = await response.json();\\n    return data;\\n  } catch (error) {\\n    console.error('Error fetching transaction:', error);\\n  }\\n};\",\n          python: \"import requests\\n\\nheaders = {\\n    'Authorization': 'Bearer YOUR_API_KEY',\\n    'Content-Type': 'application/json'\\n}\\n\\ntransaction_id = 'txn_123abc'\\nresponse = requests.get(f'https://api.lemu.africa/v1/transactions/{transaction_id}', headers=headers)\\ndata = response.json()\\nprint(data)\"\n        }\n      }\n    ]\n  },\n  {\n    id: 'webhooks',\n    name: 'Webhooks',\n    description: 'Configure and manage webhooks for real-time notifications',\n    endpoints: [\n      {\n        id: 'create-webhook',\n        name: 'Create Webhook',\n        description: 'Create a webhook to receive notifications for specific events',\n        method: 'POST',\n        url: '/api/v1/webhooks',\n        headers: {\n          'Authorization': 'Bearer YOUR_API_KEY',\n          'Content-Type': 'application/json'\n        },\n        requestBody: {\n          url: 'https://your-domain.com/webhook',\n          events: ['transaction.success', 'transaction.failed'],\n          description: 'Webhook for transaction events'\n        },\n        responses: {\n          '201': {\n            description: 'Webhook created successfully',\n            example: {\n              status: 'success',\n              data: {\n                id: 'wh_123abc',\n                url: 'https://your-domain.com/webhook',\n                events: ['transaction.success', 'transaction.failed'],\n                description: 'Webhook for transaction events',\n                active: true,\n                created_at: '2023-01-01T12:00:00Z'\n              }\n            }\n          },\n          '400': {\n            description: 'Bad request: Invalid webhook details',\n            example: {\n              status: 'error',\n              code: 'invalid_webhook',\n              message: 'Invalid webhook URL provided'\n            }\n          },\n          '401': {\n            description: 'Unauthorized: Invalid or missing API key',\n            example: {\n              status: 'error',\n              code: 'unauthorized',\n              message: 'Invalid API key provided'\n            }\n          }\n        },\n        sampleCode: {\n          curl: \"curl -X POST 'https://api.lemu.africa/v1/webhooks' \\\\\\n  -H 'Authorization: Bearer YOUR_API_KEY' \\\\\\n  -H 'Content-Type: application/json' \\\\\\n  -d '{\\n    \\\"url\\\": \\\"https://your-domain.com/webhook\\\",\\n    \\\"events\\\": [\\\"transaction.success\\\", \\\"transaction.failed\\\"],\\n    \\\"description\\\": \\\"Webhook for transaction events\\\"\\n  }'\",\n          javascript: \"const createWebhook = async () => {\\n  try {\\n    const response = await fetch('https://api.lemu.africa/v1/webhooks', {\\n      method: 'POST',\\n      headers: {\\n        'Authorization': 'Bearer YOUR_API_KEY',\\n        'Content-Type': 'application/json'\\n      },\\n      body: JSON.stringify({\\n        url: 'https://your-domain.com/webhook',\\n        events: ['transaction.success', 'transaction.failed'],\\n        description: 'Webhook for transaction events'\\n      })\\n    });\\n    const data = await response.json();\\n    return data;\\n  } catch (error) {\\n    console.error('Error creating webhook:', error);\\n  }\\n};\",\n          python: \"import requests\\nimport json\\n\\nheaders = {\\n    'Authorization': 'Bearer YOUR_API_KEY',\\n    'Content-Type': 'application/json'\\n}\\n\\npayload = {\\n    'url': 'https://your-domain.com/webhook',\\n    'events': ['transaction.success', 'transaction.failed'],\\n    'description': 'Webhook for transaction events'\\n}\\n\\nresponse = requests.post('https://api.lemu.africa/v1/webhooks', headers=headers, data=json.dumps(payload))\\ndata = response.json()\\nprint(data)\"\n        }\n      },\n      {\n        id: 'list-webhooks',\n        name: 'List Webhooks',\n        description: 'Retrieve a list of all webhooks configured for your account',\n        method: 'GET',\n        url: '/api/v1/webhooks',\n        headers: {\n          'Authorization': 'Bearer YOUR_API_KEY',\n          'Content-Type': 'application/json'\n        },\n        responses: {\n          '200': {\n            description: 'List of webhooks retrieved successfully',\n            example: {\n              status: 'success',\n              data: {\n                webhooks: [\n                  {\n                    id: 'wh_123abc',\n                    url: 'https://your-domain.com/webhook',\n                    events: ['transaction.success', 'transaction.failed'],\n                    description: 'Webhook for transaction events',\n                    active: true,\n                    created_at: '2023-01-01T12:00:00Z'\n                  },\n                  {\n                    id: 'wh_456def',\n                    url: 'https://your-domain.com/other-webhook',\n                    events: ['account.created'],\n                    description: 'Webhook for account events',\n                    active: true,\n                    created_at: '2023-01-02T12:00:00Z'\n                  }\n                ]\n              }\n            }\n          },\n          '401': {\n            description: 'Unauthorized: Invalid or missing API key',\n            example: {\n              status: 'error',\n              code: 'unauthorized',\n              message: 'Invalid API key provided'\n            }\n          }\n        },\n        sampleCode: {\n          curl: \"curl -X GET 'https://api.lemu.africa/v1/webhooks' \\\\\\n  -H 'Authorization: Bearer YOUR_API_KEY'\",\n          javascript: \"const fetchWebhooks = async () => {\\n  try {\\n    const response = await fetch('https://api.lemu.africa/v1/webhooks', {\\n      method: 'GET',\\n      headers: {\\n        'Authorization': 'Bearer YOUR_API_KEY',\\n        'Content-Type': 'application/json'\\n      }\\n    });\\n    const data = await response.json();\\n    return data;\\n  } catch (error) {\\n    console.error('Error fetching webhooks:', error);\\n  }\\n};\",\n          python: \"import requests\\n\\nheaders = {\\n    'Authorization': 'Bearer YOUR_API_KEY',\\n    'Content-Type': 'application/json'\\n}\\n\\nresponse = requests.get('https://api.lemu.africa/v1/webhooks', headers=headers)\\ndata = response.json()\\nprint(data)\"\n        }\n      }\n    ]\n  }\n]; "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 429, "column": 0}, "map": {"version":3,"sources":["file:///Users/mac/Documents/workstation/2025/lemu-project/developer/src/app/page.tsx"],"sourcesContent":["import Link from 'next/link';\nimport { API_DATA } from './api/apiData';\n\nexport default function Home() {\n  return (\n    <div>\n      {/* Hero section */}\n      <div className=\"hero\">\n        <div className=\"container py-16 sm:py-24\">\n          <div className=\"text-center\">\n            <div className=\"mb-8 inline-block bg-white/20 backdrop-blur-sm px-4 py-1 rounded-full\">\n              <span className=\"text-white font-medium\">Lemu Developer API</span>\n            </div>\n            <h1 className=\"text-4xl font-extrabold text-white sm:text-5xl sm:tracking-tight lg:text-6xl\">\n              Lemu Banking API\n            </h1>\n            <p className=\"max-w-xl mt-5 mx-auto text-xl text-white\">\n              Smart financial API solutions for developers building innovative applications.\n            </p>\n            <div className=\"mt-8 flex justify-center space-x-4\">\n              <Link href=\"/reference/get-bank-list\">\n                <div className=\"inline-flex items-center justify-center px-5 py-3 border border-transparent text-base font-medium rounded-md text-primary bg-white hover:bg-gray-50 shadow-lg\">\n                  API Reference\n                </div>\n              </Link>\n              <Link href=\"#quickstart\">\n                <div className=\"inline-flex items-center justify-center px-5 py-3 border border-white/30 backdrop-blur-sm text-base font-medium rounded-md text-white hover:bg-white/10 transition-colors\">\n                  Quick Start\n                </div>\n              </Link>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"absolute hidden md:block right-10 top-40 w-64 h-64 bg-white/10 rounded-full filter blur-3xl\"></div>\n        <div className=\"absolute hidden md:block left-10 top-20 w-96 h-96 bg-white/10 rounded-full filter blur-3xl\"></div>\n      </div>\n      \n      {/* Features */}\n      <div className=\"section bg-white\">\n        <div className=\"container\">\n          <div className=\"lg:text-center\">\n            <h2 className=\"section-heading\">Features</h2>\n            <p className=\"section-title\">\n              Everything you need to build financial solutions\n            </p>\n            <p className=\"section-description\">\n              Our API provides a comprehensive suite of banking and payment services.\n            </p>\n          </div>\n\n          <div className=\"mt-16\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-10\">\n              <div className=\"group bg-white rounded-xl shadow-md hover:shadow-xl p-8 transition-all duration-300 border border-gray-100 relative overflow-hidden transform perspective-1000 hover:scale-[1.02] hover:-rotate-1\">\n                <div className=\"absolute top-0 right-0 w-40 h-40 bg-primary opacity-5 rounded-full -mr-16 -mt-16\"></div>\n                <div className=\"absolute bottom-0 left-0 w-20 h-20 bg-primary opacity-5 rounded-full -ml-10 -mb-10\"></div>\n                <div className=\"relative z-10\">\n                  <div className=\"flex items-start\">\n                    <div className=\"flex-shrink-0\">\n                      <div className=\"flex items-center justify-center h-14 w-14 rounded-lg bg-gradient-to-br from-primary to-primary-dark text-white shadow-lg mb-6 transform group-hover:rotate-6 group-hover:scale-110 transition-all duration-300\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-7 w-7 drop-shadow-sm\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 6l3 1m0 0l-3 9a5.002 5.002 0 006.001 0M6 7l3 9M6 7l6-2m6 2l3-1m-3 1l-3 9a5.002 5.002 0 006.001 0M18 7l3 9m-3-9l-6-2m0-2v2m0 16V5m0 16H9m3 0h3\" />\n                        </svg>\n                      </div>\n                    </div>\n                  </div>\n                  <h3 className=\"text-xl font-bold text-gray-900 mb-3 group-hover:text-primary transition-colors\">Account Verification</h3>\n                  <p className=\"text-gray-600\">\n                    Verify bank account details with real-time validation and seamless integration.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"group bg-white rounded-xl shadow-md hover:shadow-xl p-8 transition-all duration-300 border border-gray-100 relative overflow-hidden transform perspective-1000 hover:scale-[1.02] hover:rotate-1\">\n                <div className=\"absolute top-0 right-0 w-40 h-40 bg-primary opacity-5 rounded-full -mr-16 -mt-16\"></div>\n                <div className=\"absolute bottom-0 left-0 w-20 h-20 bg-primary opacity-5 rounded-full -ml-10 -mb-10\"></div>\n                <div className=\"relative z-10\">\n                  <div className=\"flex items-start\">\n                    <div className=\"flex-shrink-0\">\n                      <div className=\"flex items-center justify-center h-14 w-14 rounded-lg bg-gradient-to-br from-primary to-primary-dark text-white shadow-lg mb-6 transform group-hover:rotate-6 group-hover:scale-110 transition-all duration-300\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-7 w-7 drop-shadow-sm\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4\" />\n                        </svg>\n                      </div>\n                    </div>\n                  </div>\n                  <h3 className=\"text-xl font-bold text-gray-900 mb-3 group-hover:text-primary transition-colors\">Instant Transfers</h3>\n                  <p className=\"text-gray-600\">\n                    Initiate and process bank transfers quickly and securely across multiple financial institutions.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"group bg-white rounded-xl shadow-md hover:shadow-xl p-8 transition-all duration-300 border border-gray-100 relative overflow-hidden transform perspective-1000 hover:scale-[1.02] hover:rotate-1\">\n                <div className=\"absolute top-0 right-0 w-40 h-40 bg-primary opacity-5 rounded-full -mr-16 -mt-16\"></div>\n                <div className=\"absolute bottom-0 left-0 w-20 h-20 bg-primary opacity-5 rounded-full -ml-10 -mb-10\"></div>\n                <div className=\"relative z-10\">\n                  <div className=\"flex items-start\">\n                    <div className=\"flex-shrink-0\">\n                      <div className=\"flex items-center justify-center h-14 w-14 rounded-lg bg-gradient-to-br from-primary to-primary-dark text-white shadow-lg mb-6 transform group-hover:rotate-6 group-hover:scale-110 transition-all duration-300\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-7 w-7 drop-shadow-sm\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z\" />\n                        </svg>\n                      </div>\n                    </div>\n                  </div>\n                  <h3 className=\"text-xl font-bold text-gray-900 mb-3 group-hover:text-primary transition-colors\">Secure Authentication</h3>\n                  <p className=\"text-gray-600\">\n                    Industry-standard security practices and authentication methods to protect sensitive information.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"group bg-white rounded-xl shadow-md hover:shadow-xl p-8 transition-all duration-300 border border-gray-100 relative overflow-hidden transform perspective-1000 hover:scale-[1.02] hover:-rotate-1\">\n                <div className=\"absolute top-0 right-0 w-40 h-40 bg-primary opacity-5 rounded-full -mr-16 -mt-16\"></div>\n                <div className=\"absolute bottom-0 left-0 w-20 h-20 bg-primary opacity-5 rounded-full -ml-10 -mb-10\"></div>\n                <div className=\"relative z-10\">\n                  <div className=\"flex items-start\">\n                    <div className=\"flex-shrink-0\">\n                      <div className=\"flex items-center justify-center h-14 w-14 rounded-lg bg-gradient-to-br from-primary to-primary-dark text-white shadow-lg mb-6 transform group-hover:rotate-6 group-hover:scale-110 transition-all duration-300\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-7 w-7 drop-shadow-sm\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n                        </svg>\n                      </div>\n                    </div>\n                  </div>\n                  <h3 className=\"text-xl font-bold text-gray-900 mb-3 group-hover:text-primary transition-colors\">Transaction Analytics</h3>\n                  <p className=\"text-gray-600\">\n                    Detailed transaction data and analytics to help monitor and optimize financial operations.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* API Overview */}\n      <div id=\"quickstart\" className=\"section bg-gray-50\">\n        <div className=\"container\">\n          <div className=\"lg:text-center\">\n            <h2 className=\"section-heading\">Quick Start</h2>\n            <p className=\"section-title\">\n              Start integrating in minutes\n            </p>\n            <p className=\"section-description\">\n              Follow these simple steps to get started with our API.\n            </p>\n          </div>\n          \n          <div className=\"mt-12\">\n            <div className=\"max-w-3xl mx-auto space-y-8\">\n              <div className=\"card border-l-4 border-l-primary transform transition-all duration-300 hover:translate-x-1 hover:shadow-lg\">\n                <div className=\"flex items-start\">\n                  <div className=\"flex-shrink-0 mr-4\">\n                    <div className=\"flex items-center justify-center h-10 w-10 rounded-full bg-gradient-to-br from-primary to-primary-dark text-white font-semibold shadow-md\">\n                      1\n                    </div>\n                  </div>\n                  <div>\n                    <h3 className=\"text-xl font-bold text-gray-900 mb-2\">Register and Get API Keys</h3>\n                    <p className=\"text-gray-600\">\n                      To use the Lemu API, you need to obtain API keys. Click on the <span className=\"font-medium text-primary\">\"Get API Key\"</span> button in the header to generate your unique API key and secret.\n                    </p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"card border-l-4 border-l-primary transform transition-all duration-300 hover:translate-x-1 hover:shadow-lg\">\n                <div className=\"flex items-start\">\n                  <div className=\"flex-shrink-0 mr-4\">\n                    <div className=\"flex items-center justify-center h-10 w-10 rounded-full bg-gradient-to-br from-primary to-primary-dark text-white font-semibold shadow-md\">\n                      2\n                    </div>\n                  </div>\n                  <div className=\"w-full\">\n                    <h3 className=\"text-xl font-bold text-gray-900 mb-2\">Make Your First API Call</h3>\n                    <p className=\"text-gray-600 mb-4\">\n                      Let's start with a simple GET request to retrieve the list of supported banks:\n                    </p>\n                    \n                    <div className=\"bg-gray-800 rounded-lg overflow-hidden shadow-lg transform transition-all duration-300 hover:shadow-xl hover:-translate-y-1\">\n                      <div className=\"flex items-center justify-between bg-gray-900 px-4 py-2 border-b border-gray-700\">\n                        <div className=\"flex space-x-2\">\n                          <div className=\"h-3 w-3 rounded-full bg-red-500 shadow-inner\"></div>\n                          <div className=\"h-3 w-3 rounded-full bg-yellow-500 shadow-inner\"></div>\n                          <div className=\"h-3 w-3 rounded-full bg-green-500 shadow-inner\"></div>\n                        </div>\n                        <span className=\"text-xs font-mono text-gray-400\">cURL</span>\n                      </div>\n                      <div className=\"p-4 relative\">\n                        <div className=\"absolute inset-0 bg-gradient-to-br from-gray-800 to-gray-900 opacity-50\"></div>\n                        <pre className=\"text-sm text-gray-300 font-mono relative z-10\">\n{`curl -X GET \\\\\n  --url https://api.lemu.africa/v1/banks \\\\\n  --header \"Authorization: Bearer YOUR_API_KEY\" \\\\\n  --header \"Content-Type: application/json\"`}\n                        </pre>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"card border-l-4 border-l-primary transform transition-all duration-300 hover:translate-x-1 hover:shadow-lg\">\n                <div className=\"flex items-start\">\n                  <div className=\"flex-shrink-0 mr-4\">\n                    <div className=\"flex items-center justify-center h-10 w-10 rounded-full bg-gradient-to-br from-primary to-primary-dark text-white font-semibold shadow-md\">\n                      3\n                    </div>\n                  </div>\n                  <div>\n                    <h3 className=\"text-xl font-bold text-gray-900 mb-2\">Explore the API Reference</h3>\n                    <p className=\"text-gray-600 mb-4\">\n                      Check out our comprehensive API reference documentation for details on all available endpoints.\n                    </p>\n                    \n                    <Link href=\"/reference/get-bank-list\">\n                      <div className=\"inline-flex items-center px-4 py-2 border border-transparent font-medium rounded-md shadow-md text-white bg-gradient-to-r from-primary to-primary-dark hover:from-primary-light hover:to-primary transition-all duration-300 transform hover:-translate-y-1 hover:shadow-lg\">\n                        View API Reference\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 ml-2 drop-shadow-sm\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M14 5l7 7m0 0l-7 7m7-7H3\" />\n                        </svg>\n                      </div>\n                    </Link>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* API Categories */}\n      <div className=\"section bg-white\">\n        <div className=\"container\">\n          <div className=\"lg:text-center\">\n            <h2 className=\"section-heading\">API Categories</h2>\n            <p className=\"section-title\">\n              Explore our API endpoints\n            </p>\n            <p className=\"section-description\">\n              Browse through our API categories to find what you need.\n            </p>\n          </div>\n          \n          <div className=\"mt-12\">\n            <div className=\"grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3\">\n              {API_DATA.map((category) => (\n                <div key={category.name} className=\"card hover:shadow-md\">\n                  <h3 className=\"card-title\">{category.name}</h3>\n                  <p className=\"card-description mb-4\">{category.description}</p>\n                  <div className=\"mt-4\">\n                    <ul className=\"space-y-2\">\n                      {category.endpoints.map((endpoint) => (\n                        <li key={endpoint.id}>\n                          <Link href={`/reference/${endpoint.id}`}>\n                            <div className=\"text-sm text-primary hover:text-primary-dark flex items-center\">\n                              <span className={`inline-block w-14 text-xs font-mono mr-2 px-1 py-0.5 text-center rounded \n                                ${endpoint.method === 'GET' ? 'method-get' : ''}\n                                ${endpoint.method === 'POST' ? 'method-post' : ''}\n                                ${endpoint.method === 'PUT' ? 'method-put' : ''}\n                                ${endpoint.method === 'DELETE' ? 'method-delete' : ''}\n                              `}>\n                                {endpoint.method}\n                              </span>\n                              <span className=\"hover:underline\">{endpoint.name}</span>\n                            </div>\n                          </Link>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}